{"version":3,"file":"client.cjs.production.min.js","sources":["../src/types.ts","../src/internal_mime_types.ts","../src/index.ts"],"sourcesContent":["import type { JSONSchema7 } from \"json-schema\";\nimport moment from \"moment-timezone\";\nimport { z } from \"zod\";\n\nimport { INTERNAL_MIME_TYPES_VALUES } from \"./internal_mime_types\";\n\ntype StringLiteral<T> = T extends string\n  ? string extends T\n    ? never\n    : T\n  : never;\n\n// Custom schema to get a string literal type and yet allow any string when parsing\nconst FlexibleEnumSchema = <T extends string>() =>\n  z.custom<StringLiteral<T>>((val) => {\n    return typeof val === \"string\";\n  });\n\nconst ModelProviderIdSchema = FlexibleEnumSchema<\n  | \"openai\"\n  | \"anthropic\"\n  | \"mistral\"\n  | \"google_ai_studio\"\n  | \"togetherai\"\n  | \"deepseek\"\n  | \"fireworks\"\n>();\n\nconst ModelLLMIdSchema = FlexibleEnumSchema<\n  | \"gpt-3.5-turbo\"\n  | \"gpt-4-turbo\"\n  | \"gpt-4o-2024-08-06\"\n  | \"gpt-4o\"\n  | \"gpt-4o-mini\"\n  | \"gpt-4.1-2025-04-14\"\n  | \"gpt-4.1-mini-2025-04-14\"\n  | \"o1\"\n  | \"o1-mini\"\n  | \"o3\"\n  | \"o3-mini\"\n  | \"o4-mini\"\n  | \"claude-3-opus-20240229\"\n  | \"claude-3-5-sonnet-20240620\"\n  | \"claude-3-5-sonnet-20241022\"\n  | \"claude-3-7-sonnet-20250219\"\n  | \"claude-3-5-haiku-20241022\"\n  | \"claude-3-haiku-20240307\"\n  | \"claude-2.1\"\n  | \"claude-instant-1.2\"\n  | \"mistral-large-latest\"\n  | \"mistral-medium\"\n  | \"mistral-small-latest\"\n  | \"codestral-latest\"\n  | \"gemini-1.5-pro-latest\"\n  | \"gemini-1.5-flash-latest\"\n  | \"gemini-2.0-flash\"\n  | \"gemini-2.0-flash-lite\"\n  | \"gemini-2.5-pro-preview-03-25\"\n  | \"gemini-2.0-flash-exp\" // DEPRECATED\n  | \"gemini-2.0-flash-lite-preview-02-05\" // DEPRECATED\n  | \"gemini-2.0-pro-exp-02-05\" // DEPRECATED\n  | \"gemini-2.0-flash-thinking-exp-01-21\" // DEPRECATED\n  | \"meta-llama/Llama-3.3-70B-Instruct-Turbo\" // togetherai\n  | \"Qwen/Qwen2.5-Coder-32B-Instruct\" // togetherai\n  | \"Qwen/QwQ-32B-Preview\" // togetherai\n  | \"Qwen/Qwen2-72B-Instruct\" // togetherai\n  | \"deepseek-ai/DeepSeek-V3\" // togetherai\n  | \"deepseek-ai/DeepSeek-R1\" // togetherai\n  | \"deepseek-chat\" // deepseek api\n  | \"deepseek-reasoner\" // deepseek api\n  | \"accounts/fireworks/models/deepseek-r1\" // fireworks\n>();\n\nconst EmbeddingProviderIdSchema = FlexibleEnumSchema<\"openai\" | \"mistral\">();\n\nconst ConnectorsAPIErrorTypeSchema = FlexibleEnumSchema<\n  | \"authorization_error\"\n  | \"not_found\"\n  | \"internal_server_error\"\n  | \"unexpected_error_format\"\n  | \"unexpected_response_format\"\n  | \"unexpected_network_error\"\n  | \"unknown_connector_provider\"\n  | \"invalid_request_error\"\n  | \"connector_authorization_error\"\n  | \"connector_not_found\"\n  | \"connector_configuration_not_found\"\n  | \"connector_update_error\"\n  | \"connector_update_unauthorized\"\n  | \"connector_oauth_target_mismatch\"\n  | \"connector_oauth_error\"\n  | \"slack_channel_not_found\"\n  | \"connector_rate_limit_error\"\n  | \"slack_configuration_not_found\"\n  | \"google_drive_webhook_not_found\"\n>();\n\nconst ConnectorsAPIErrorSchema = z.object({\n  type: ConnectorsAPIErrorTypeSchema,\n  message: z.string(),\n});\n\nexport type ConnectorsAPIError = z.infer<typeof ConnectorsAPIErrorSchema>;\n\nconst ModelIdSchema = z.number();\n\nexport type ConnectorsAPIErrorType = z.infer<\n  typeof ConnectorsAPIErrorTypeSchema\n>;\n\nexport function isConnectorsAPIError(obj: unknown): obj is ConnectorsAPIError {\n  return (\n    typeof obj === \"object\" &&\n    obj !== null &&\n    \"message\" in obj &&\n    typeof obj.message === \"string\" &&\n    \"type\" in obj &&\n    typeof obj.type === \"string\" &&\n    ConnectorsAPIErrorSchema.safeParse(obj).success\n  );\n}\n\n// Supported content types that are plain text and can be sent as file-less content fragment.\nexport const supportedOtherFileFormats = {\n  \"application/msword\": [\".doc\", \".docx\"],\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": [\n    \".doc\",\n    \".docx\",\n  ],\n  \"application/vnd.ms-powerpoint\": [\".ppt\", \".pptx\"],\n  \"application/vnd.openxmlformats-officedocument.presentationml.presentation\": [\n    \".ppt\",\n    \".pptx\",\n  ],\n  \"application/vnd.google-apps.document\": [],\n  \"application/vnd.google-apps.presentation\": [],\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": [\n    \".xlsx\",\n  ],\n  \"application/vnd.google-apps.spreadsheet\": [],\n  \"application/vnd.ms-excel\": [\".xls\"],\n  \"application/pdf\": [\".pdf\"],\n  \"application/vnd.dust.section.json\": [\".json\"],\n  \"text/comma-separated-values\": [\".csv\"],\n  \"text/csv\": [\".csv\"],\n  \"text/markdown\": [\".md\", \".markdown\"],\n  \"text/plain\": [\".txt\", \".log\", \".cfg\", \".conf\"],\n  \"text/tab-separated-values\": [\".tsv\"],\n  \"text/tsv\": [\".tsv\"],\n  \"text/vnd.dust.attachment.slack.thread\": [\".txt\"],\n  \"text/html\": [\".html\", \".htm\", \".xhtml\", \".xhtml+xml\"],\n  \"text/xml\": [\".xml\"],\n  \"text/calendar\": [\".ics\"],\n  \"text/css\": [\".css\"],\n  \"text/javascript\": [\".js\", \".mjs\", \".jsx\"],\n  \"text/typescript\": [\".ts\", \".tsx\"],\n  \"application/json\": [\".json\"],\n  \"application/xml\": [\".xml\"],\n  \"application/x-sh\": [\".sh\"],\n  \"text/x-sh\": [\".sh\"],\n  \"text/x-python\": [\".py\"],\n  \"text/x-python-script\": [\".py\"],\n  \"application/x-yaml\": [\".yaml\", \".yml\"],\n  \"text/yaml\": [\".yaml\", \".yml\"],\n  \"text/vnd.yaml\": [\".yaml\", \".yml\"],\n  \"text/x-c\": [\".c\", \".cc\", \".cpp\", \".cxx\", \".dic\", \".h\", \".hh\"],\n  \"text/x-csharp\": [\".cs\"],\n  \"text/x-java-source\": [\".java\"],\n  \"text/x-php\": [\".php\"],\n  \"text/x-ruby\": [\".rb\"],\n  \"text/x-sql\": [\".sql\"],\n  \"text/x-swift\": [\".swift\"],\n  \"text/x-rust\": [\".rs\"],\n  \"text/x-go\": [\".go\"],\n  \"text/x-kotlin\": [\".kt\", \".kts\"],\n  \"text/x-scala\": [\".scala\"],\n  \"text/x-groovy\": [\".groovy\"],\n  \"text/x-perl\": [\".pl\", \".pm\"],\n  \"text/x-perl-script\": [\".pl\", \".pm\"],\n  \"application/octet-stream\": [],\n} as const;\n\n// Supported content types for images.\nexport const supportedImageFileFormats = {\n  \"image/jpeg\": [\".jpg\", \".jpeg\"],\n  \"image/png\": [\".png\"],\n  \"image/gif\": [\".gif\"],\n  \"image/webp\": [\".webp\"],\n} as const;\n\ntype OtherContentType = keyof typeof supportedOtherFileFormats;\ntype ImageContentType = keyof typeof supportedImageFileFormats;\n\nconst supportedOtherContentTypes = Object.keys(\n  supportedOtherFileFormats\n) as OtherContentType[];\nconst supportedImageContentTypes = Object.keys(\n  supportedImageFileFormats\n) as ImageContentType[];\n\nexport const supportedFileExtensions = [\n  ...Object.keys(supportedOtherFileFormats),\n  ...Object.keys(supportedImageFileFormats),\n];\n\nexport type SupportedFileContentType = OtherContentType | ImageContentType;\nconst supportedUploadableContentType = [\n  ...supportedOtherContentTypes,\n  ...supportedImageContentTypes,\n] as SupportedFileContentType[];\n\nconst SupportedContentFragmentTypeSchema = FlexibleEnumSchema<\n  | keyof typeof supportedOtherFileFormats\n  | keyof typeof supportedImageFileFormats\n  | (typeof INTERNAL_MIME_TYPES_VALUES)[number]\n  // Legacy content types still retuned by the API when rendering old messages.\n  | \"dust-application/slack\"\n>();\n\nconst SupportedFileContentFragmentTypeSchema = FlexibleEnumSchema<\n  | keyof typeof supportedOtherFileFormats\n  | keyof typeof supportedImageFileFormats\n>();\n\nexport function isSupportedFileContentType(\n  contentType: string\n): contentType is SupportedFileContentType {\n  return supportedUploadableContentType.includes(\n    contentType as SupportedFileContentType\n  );\n}\n\nexport function isSupportedPlainTextContentType(\n  contentType: string\n): contentType is OtherContentType {\n  return supportedOtherContentTypes.includes(contentType as OtherContentType);\n}\n\nexport function isSupportedImageContentType(\n  contentType: string\n): contentType is ImageContentType {\n  return supportedImageContentTypes.includes(contentType as ImageContentType);\n}\n\nconst UserMessageOriginSchema = FlexibleEnumSchema<\n  | \"api\"\n  | \"email\"\n  | \"extension\"\n  | \"github-copilot-chat\"\n  | \"gsheet\"\n  | \"make\"\n  | \"mcp\"\n  | \"n8n\"\n  | \"raycast\"\n  | \"slack\"\n  | \"web\"\n  | \"zapier\"\n  | \"zendesk\"\n>()\n  .or(z.null())\n  .or(z.undefined());\n\nconst VisibilitySchema = FlexibleEnumSchema<\"visible\" | \"deleted\">();\n\nconst RankSchema = z.object({\n  rank: z.number(),\n});\n\nexport class Ok<T> {\n  constructor(public value: T) {}\n\n  isOk(): this is Ok<T> {\n    return true;\n  }\n\n  isErr(): this is Err<never> {\n    return false;\n  }\n}\n\nexport class Err<E> {\n  constructor(public error: E) {}\n\n  isOk(): this is Ok<never> {\n    return false;\n  }\n\n  isErr(): this is Err<E> {\n    return true;\n  }\n}\n\nexport type Result<T, E> = Ok<T> | Err<E>;\n\n// Custom codec to validate the timezone\nconst Timezone = z.string().refine((s) => moment.tz.names().includes(s), {\n  message: \"Invalid timezone\",\n});\n\nconst ConnectorProvidersSchema = FlexibleEnumSchema<\n  | \"confluence\"\n  | \"github\"\n  | \"google_drive\"\n  | \"intercom\"\n  | \"notion\"\n  | \"slack\"\n  | \"microsoft\"\n  | \"webcrawler\"\n  | \"snowflake\"\n  | \"zendesk\"\n  | \"bigquery\"\n  | \"salesforce\"\n  | \"gong\"\n>();\nexport type ConnectorProvider = z.infer<typeof ConnectorProvidersSchema>;\n\nexport const isConnectorProvider = (\n  provider: string\n): provider is ConnectorProvider =>\n  ConnectorProvidersSchema.safeParse(provider).success;\n\nconst EditedByUserSchema = z.object({\n  editedAt: z.number().nullable(),\n  fullName: z.string().nullable(),\n  imageUrl: z.string().nullable(),\n  email: z.string().nullable(),\n  userId: z.string().nullable(),\n});\n\nconst DataSourceTypeSchema = z.object({\n  id: ModelIdSchema,\n  sId: z.string(),\n  createdAt: z.number(),\n  name: z.string(),\n  description: z.string().nullable(),\n  assistantDefaultSelected: z.boolean(),\n  dustAPIProjectId: z.string(),\n  dustAPIDataSourceId: z.string(),\n  connectorId: z.string().nullable(),\n  connectorProvider: ConnectorProvidersSchema.nullable(),\n  editedByUser: EditedByUserSchema.nullable().optional(),\n});\n\nexport type DataSourceType = z.infer<typeof DataSourceTypeSchema>;\n\nexport function isFolder(\n  ds: DataSourceType\n): ds is DataSourceType & { connectorProvider: null } {\n  // If there is no connectorProvider, it's a folder.\n  return !ds.connectorProvider;\n}\n\nexport function isWebsite(\n  ds: DataSourceType\n): ds is DataSourceType & { connectorProvider: \"webcrawler\" } {\n  return ds.connectorProvider === \"webcrawler\";\n}\n\nconst CoreAPIDocumentChunkSchema = z.object({\n  text: z.string(),\n  hash: z.string(),\n  offset: z.number(),\n  vector: z.array(z.number()).nullable().optional(),\n  score: z.number().nullable().optional(),\n});\n\nconst CoreAPIDocumentSchema = z.object({\n  data_source_id: z.string(),\n  created: z.number(),\n  document_id: z.string(),\n  timestamp: z.number(),\n  parent_id: z.string().nullable().optional(),\n  tags: z.array(z.string()),\n  source_url: z.string().nullable().optional(),\n  hash: z.string(),\n  text_size: z.number(),\n  chunk_count: z.number(),\n  chunks: z.array(CoreAPIDocumentChunkSchema),\n  text: z.string().nullable().optional(),\n});\n\nconst CoreAPILightDocumentSchema = z.object({\n  hash: z.string(),\n  text_size: z.number(),\n  chunk_count: z.number(),\n  token_count: z.number(),\n  created: z.number(),\n});\n\nconst CoreAPIRowValueSchema = z.union([\n  z.number(),\n  z.string(),\n  z.boolean(),\n  z.object({\n    type: z.literal(\"datetime\"),\n    epoch: z.number(),\n    string_value: z.string().optional(),\n  }),\n  z.null(),\n]);\n\nconst CoreAPIRowSchema = z.object({\n  row_id: z.string(),\n  value: z.record(CoreAPIRowValueSchema),\n});\n\nexport type CoreAPIRowType = z.infer<typeof CoreAPIRowSchema>;\n\nconst CoreAPITableSchema = z.array(\n  z.object({\n    name: z.string(),\n    value_type: z.enum([\"int\", \"float\", \"text\", \"bool\", \"datetime\"]),\n    possible_values: z.array(z.string()).nullable().optional(),\n  })\n);\n\nconst CoreAPITablePublicSchema = z.object({\n  table_id: z.string(),\n  name: z.string(),\n  description: z.string(),\n  schema: CoreAPITableSchema.nullable(),\n  timestamp: z.number(),\n  tags: z.array(z.string()),\n  parents: z.array(z.string()),\n  parent_id: z.string().nullable().optional(),\n  mime_type: z.string().optional(),\n  title: z.string().optional(),\n});\n\nexport type CoreAPITablePublic = z.infer<typeof CoreAPITablePublicSchema>;\n\nexport interface LoggerInterface {\n  error: (args: Record<string, unknown>, message: string) => void;\n  info: (args: Record<string, unknown>, message: string) => void;\n  trace: (args: Record<string, unknown>, message: string) => void;\n  warn: (args: Record<string, unknown>, message: string) => void;\n}\n\nconst DataSourceViewCategoriesSchema = FlexibleEnumSchema<\n  \"managed\" | \"folder\" | \"website\" | \"apps\" | \"actions\"\n>();\n\nconst BlockTypeSchema = FlexibleEnumSchema<\n  | \"input\"\n  | \"data\"\n  | \"data_source\"\n  | \"code\"\n  | \"llm\"\n  | \"chat\"\n  | \"map\"\n  | \"reduce\"\n  | \"while\"\n  | \"end\"\n  | \"search\"\n  | \"curl\"\n  | \"browser\"\n  | \"database_schema\"\n  | \"database\"\n>();\n\nconst StatusSchema = z.enum([\"running\", \"succeeded\", \"errored\"]);\n\nconst BlockRunConfigSchema = z.record(z.any());\n\nconst BlockStatusSchema = z.object({\n  block_type: BlockTypeSchema,\n  name: z.string(),\n  status: StatusSchema,\n  success_count: z.number(),\n  error_count: z.number(),\n});\n\nconst RunConfigSchema = z.object({\n  blocks: BlockRunConfigSchema,\n});\n\nconst TraceTypeSchema = z.object({\n  value: z.unknown().nullable(),\n  error: z.string().nullable(),\n  meta: z.unknown().nullable(),\n});\n\nconst RunStatusSchema = z.object({\n  run: StatusSchema,\n  blocks: z.array(BlockStatusSchema),\n});\n\nconst RunTypeSchema = z.object({\n  run_id: z.string(),\n  created: z.number(),\n  run_type: z.enum([\"deploy\", \"local\", \"execute\"]),\n  app_hash: z.string().nullable().optional(),\n  specification_hash: z.string().nullable().optional(),\n  config: RunConfigSchema,\n  status: RunStatusSchema,\n  traces: z.array(\n    z.tuple([\n      z.tuple([BlockTypeSchema, z.string()]),\n      z.array(z.array(TraceTypeSchema)),\n    ])\n  ),\n  results: z\n    .array(\n      z.array(\n        z.object({\n          value: z.unknown().nullable().optional(),\n          error: z.string().nullable().optional(),\n        })\n      )\n    )\n    .nullable()\n    .optional(),\n});\n\nconst TokensClassificationSchema = FlexibleEnumSchema<\n  \"tokens\" | \"chain_of_thought\"\n>();\n\nexport const GenerationTokensEventSchema = z.object({\n  type: z.literal(\"generation_tokens\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  text: z.string(),\n  classification: z.union([\n    TokensClassificationSchema,\n    z.enum([\"opening_delimiter\", \"closing_delimiter\"]),\n  ]),\n  delimiterClassification: TokensClassificationSchema.nullable().optional(),\n});\nexport type GenerationTokensEvent = z.infer<typeof GenerationTokensEventSchema>;\n\nconst BaseActionTypeSchema = FlexibleEnumSchema<\n  | \"dust_app_run_action\"\n  | \"tables_query_action\"\n  | \"retrieval_action\"\n  | \"process_action\"\n  | \"websearch_action\"\n  | \"browse_action\"\n  | \"reasoning_action\"\n  | \"visualization_action\"\n>();\n\nconst BaseActionSchema = z.object({\n  id: ModelIdSchema,\n  type: BaseActionTypeSchema,\n});\n\nconst BrowseActionOutputSchema = z.object({\n  results: z.array(\n    z.object({\n      requestedUrl: z.string(),\n      browsedUrl: z.string(),\n      content: z.string(),\n      responseCode: z.string(),\n      errorMessage: z.string(),\n    })\n  ),\n});\n\nconst BrowseActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  urls: z.array(z.string()),\n  output: BrowseActionOutputSchema.nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  step: z.number(),\n  type: z.literal(\"browse_action\"),\n});\ntype BrowseActionPublicType = z.infer<typeof BrowseActionTypeSchema>;\n\nconst SearchLabelsActionOutputSchema = z.object({\n  tags: z.array(\n    z.object({\n      tag: z.string(),\n      match_count: z.number(),\n      data_sources: z.array(z.string()),\n    })\n  ),\n});\n\nconst SearchLabelsActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  output: SearchLabelsActionOutputSchema.nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  step: z.number(),\n  type: z.literal(\"search_labels_action\"),\n});\ntype SearchLabelsActionPublicType = z.infer<\n  typeof SearchLabelsActionTypeSchema\n>;\n\nconst ReasoningActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  output: z.string().nullable(),\n  thinking: z.string().nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  step: z.number(),\n  type: z.literal(\"reasoning_action\"),\n});\ntype ReasoningActionPublicType = z.infer<typeof ReasoningActionTypeSchema>;\n\nconst ConversationIncludeFileActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  params: z.object({\n    fileId: z.string(),\n  }),\n  tokensCount: z.number().nullable(),\n  fileTitle: z.string().nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  step: z.number(),\n  type: z.literal(\"conversation_include_file_action\"),\n});\n\nconst ConversationAttachmentTypeSchema = z.union([\n  // File case\n  z.object({\n    fileId: z.string(),\n    contentFragmentId: z.undefined(),\n    nodeDataSourceViewId: z.undefined(),\n    title: z.string(),\n    contentType: SupportedContentFragmentTypeSchema,\n  }),\n  // Node case\n  z.object({\n    fileId: z.undefined(),\n    contentFragmentId: z.string(),\n    nodeDataSourceViewId: z.string(),\n    title: z.string(),\n    contentType: SupportedContentFragmentTypeSchema,\n  }),\n]);\n\nconst ConversationListFilesActionTypeSchema = BaseActionSchema.extend({\n  files: z.array(ConversationAttachmentTypeSchema),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  agentMessageId: ModelIdSchema,\n  step: z.number(),\n  type: z.literal(\"conversation_list_files_action\"),\n});\n\nconst DustAppParametersSchema = z.record(\n  z.union([z.string(), z.number(), z.boolean()])\n);\n\nconst DustAppRunActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  appWorkspaceId: z.string(),\n  appId: z.string(),\n  appName: z.string(),\n  params: DustAppParametersSchema,\n  runningBlock: z\n    .object({\n      type: z.string(),\n      name: z.string(),\n      status: z.enum([\"running\", \"succeeded\", \"errored\"]),\n    })\n    .nullable(),\n  output: z.unknown().nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  step: z.number(),\n  type: z.literal(\"dust_app_run_action\"),\n}).transform((o) => ({\n  ...o,\n  output: o.output,\n}));\ntype DustAppRunActionPublicType = z.infer<typeof DustAppRunActionTypeSchema>;\n\nconst DataSourceViewKindSchema = FlexibleEnumSchema<\"default\" | \"custom\">();\n\nconst DataSourceViewSchema = z.object({\n  category: DataSourceViewCategoriesSchema,\n  createdAt: z.number(),\n  dataSource: DataSourceTypeSchema,\n  editedByUser: EditedByUserSchema.nullable().optional(),\n  id: ModelIdSchema,\n  kind: DataSourceViewKindSchema,\n  parentsIn: z.array(z.string()).nullable(),\n  sId: z.string(),\n  updatedAt: z.number(),\n  spaceId: z.string(),\n});\nexport type DataSourceViewType = z.infer<typeof DataSourceViewSchema>;\n\nconst TIME_FRAME_UNITS = [\"hour\", \"day\", \"week\", \"month\", \"year\"] as const;\nconst TimeframeUnitSchema = z.enum(TIME_FRAME_UNITS);\n\nconst TimeFrameSchema = z.object({\n  duration: z.number(),\n  unit: TimeframeUnitSchema,\n});\n\nconst DataSourceFilterSchema = z.object({\n  parents: z\n    .object({\n      in: z.array(z.string()),\n      not: z.array(z.string()),\n    })\n    .nullable(),\n});\n\nconst DataSourceConfigurationSchema = z.object({\n  workspaceId: z.string(),\n  dataSourceViewId: z.string(),\n  filter: DataSourceFilterSchema,\n});\n\nconst RetrievalDocumentChunkTypeSchema = z.object({\n  offset: z.number(),\n  score: z.number().nullable(),\n  text: z.string(),\n});\n\nexport const RetrievalDocumentTypeSchema = z.object({\n  chunks: z.array(RetrievalDocumentChunkTypeSchema),\n  documentId: z.string(),\n  dataSourceView: DataSourceViewSchema.nullable(),\n  id: ModelIdSchema,\n  reference: z.string(),\n  score: z.number().nullable(),\n  sourceUrl: z.string().nullable(),\n  tags: z.array(z.string()),\n  timestamp: z.number(),\n});\n\nexport type RetrievalDocumentPublicType = z.infer<\n  typeof RetrievalDocumentTypeSchema\n>;\n\nconst RetrievalActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  params: z.object({\n    relativeTimeFrame: TimeFrameSchema.nullable(),\n    query: z.string().nullable(),\n    topK: z.number(),\n  }),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  documents: z.array(RetrievalDocumentTypeSchema).nullable(),\n  step: z.number(),\n  type: z.literal(\"retrieval_action\"),\n});\n\nexport type RetrievalActionPublicType = z.infer<\n  typeof RetrievalActionTypeSchema\n>;\n\nconst ProcessSchemaPropertySchema = z.union([\n  z.custom<JSONSchema7>(),\n  z.null(),\n]);\n\nconst ProcessActionOutputsSchema = z.object({\n  data: z.array(z.unknown()),\n  min_timestamp: z.number(),\n  total_documents: z.number(),\n  total_chunks: z.number(),\n  total_tokens: z.number(),\n});\n\nconst ProcessActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  params: z.object({\n    relativeTimeFrame: TimeFrameSchema.nullable(),\n  }),\n  jsonSchema: ProcessSchemaPropertySchema,\n  outputs: ProcessActionOutputsSchema.nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  step: z.number(),\n  type: z.literal(\"process_action\"),\n});\ntype ProcessActionPublicType = z.infer<typeof ProcessActionTypeSchema>;\n\nconst TablesQueryActionTypeSchema = BaseActionSchema.extend({\n  params: DustAppParametersSchema,\n  output: z.record(z.union([z.string(), z.number(), z.boolean()])).nullable(),\n  resultsFileId: z.string().nullable(),\n  resultsFileSnippet: z.string().nullable(),\n  sectionFileId: z.string().nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  agentMessageId: ModelIdSchema,\n  step: z.number(),\n  type: z.literal(\"tables_query_action\"),\n});\ntype TablesQueryActionPublicType = z.infer<typeof TablesQueryActionTypeSchema>;\n\nconst WhitelistableFeaturesSchema = FlexibleEnumSchema<\n  | \"advanced_notion_management\"\n  | \"agent_discovery\"\n  | \"claude_3_7_reasoning\"\n  | \"co_edition\"\n  | \"deepseek_feature\"\n  | \"deepseek_r1_global_agent_feature\"\n  | \"dev_mcp_actions\"\n  | \"disable_run_logs\"\n  | \"document_tracker\"\n  | \"experimental_mcp_actions\"\n  | \"force_gdrive_labels_scope\"\n  | \"google_ai_studio_experimental_models_feature\"\n  | \"index_private_slack_channel\"\n  | \"labs_connection_hubspot\"\n  | \"labs_connection_linear\"\n  | \"labs_salesforce_personal_connections\"\n  | \"labs_trackers\"\n  | \"labs_transcripts\"\n  | \"mcp_actions\"\n  | \"okta_enterprise_connection\"\n  | \"openai_o1_custom_assistants_feature\"\n  | \"openai_o1_feature\"\n  | \"openai_o1_high_reasoning_custom_assistants_feature\"\n  | \"openai_o1_high_reasoning_feature\"\n  | \"openai_o1_mini_feature\"\n  | \"salesforce_feature\"\n  | \"search_knowledge_builder\"\n  | \"show_debug_tools\"\n  | \"snowflake_connector_feature\"\n  | \"usage_data_api\"\n  | \"custom_webcrawler\"\n>();\n\nexport type WhitelistableFeature = z.infer<typeof WhitelistableFeaturesSchema>;\n\nconst WorkspaceSegmentationSchema =\n  FlexibleEnumSchema<\"interesting\">().nullable();\n\nconst RoleSchema = z.enum([\"admin\", \"builder\", \"user\", \"none\"]);\n\nconst LightWorkspaceSchema = z.object({\n  id: ModelIdSchema,\n  sId: z.string(),\n  name: z.string(),\n  role: RoleSchema,\n  segmentation: WorkspaceSegmentationSchema,\n  whiteListedProviders: ModelProviderIdSchema.array().nullable(),\n  defaultEmbeddingProvider: EmbeddingProviderIdSchema.nullable(),\n});\n\nexport type LightWorkspaceType = z.infer<typeof LightWorkspaceSchema>;\nexport type WorkspaceType = z.infer<typeof WorkspaceSchema>;\nexport type ExtensionWorkspaceType = z.infer<typeof ExtensionWorkspaceSchema>;\n\nconst WorkspaceSchema = LightWorkspaceSchema.extend({\n  ssoEnforced: z.boolean().optional(),\n});\n\nconst ExtensionWorkspaceSchema = WorkspaceSchema.extend({\n  blacklistedDomains: z.array(z.string()).nullable(),\n});\n\nconst UserProviderSchema = FlexibleEnumSchema<\n  \"auth0\" | \"github\" | \"google\" | \"okta\" | \"samlp\" | \"waad\"\n>().nullable();\n\nconst UserSchema = z.object({\n  sId: z.string(),\n  id: ModelIdSchema,\n  createdAt: z.number(),\n  provider: UserProviderSchema,\n  username: z.string(),\n  email: z.string(),\n  firstName: z.string(),\n  lastName: z.string().nullable(),\n  fullName: z.string(),\n  image: z.string().nullable(),\n});\n\nexport type UserType = z.infer<typeof UserSchema>;\n\nexport const WebsearchResultSchema = z.object({\n  title: z.string(),\n  snippet: z.string(),\n  link: z.string(),\n  reference: z.string(),\n});\n\nexport type WebsearchResultPublicType = z.infer<typeof WebsearchResultSchema>;\n\nconst WebsearchActionOutputSchema = z.union([\n  z.object({\n    results: z.array(WebsearchResultSchema),\n  }),\n  z.object({\n    results: z.array(WebsearchResultSchema),\n    error: z.string(),\n  }),\n]);\n\nconst WebsearchActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  query: z.string(),\n  output: WebsearchActionOutputSchema.nullable(),\n  functionCallId: z.string().nullable(),\n  functionCallName: z.string().nullable(),\n  step: z.number(),\n  type: z.literal(\"websearch_action\"),\n});\n\nexport type WebsearchActionPublicType = z.infer<\n  typeof WebsearchActionTypeSchema\n>;\n\nconst MCPActionTypeSchema = BaseActionSchema.extend({\n  agentMessageId: ModelIdSchema,\n  functionCallName: z.string().nullable(),\n  params: z.unknown(),\n  type: z.literal(\"tool_action\"),\n});\n\nexport type MCPActionPublicType = z.infer<typeof MCPActionTypeSchema>;\n\nconst GlobalAgentStatusSchema = FlexibleEnumSchema<\n  | \"active\"\n  | \"disabled_by_admin\"\n  | \"disabled_missing_datasource\"\n  | \"disabled_free_workspace\"\n>();\n\nconst AgentStatusSchema = FlexibleEnumSchema<\"active\" | \"archived\" | \"draft\">();\n\nconst AgentConfigurationStatusSchema = z.union([\n  AgentStatusSchema,\n  GlobalAgentStatusSchema,\n]);\n\nconst AgentConfigurationScopeSchema = FlexibleEnumSchema<\n  \"global\" | \"workspace\" | \"published\" | \"private\" | \"hidden\" | \"visible\"\n>();\n\nexport const AgentConfigurationViewSchema = FlexibleEnumSchema<\n  \"all\" | \"list\" | \"workspace\" | \"published\" | \"global\" | \"favorites\"\n>();\n\nexport type AgentConfigurationViewType = z.infer<\n  typeof AgentConfigurationViewSchema\n>;\n\nconst AgentUsageTypeSchema = z.object({\n  messageCount: z.number(),\n  conversationCount: z.number(),\n  userCount: z.number(),\n  timePeriodSec: z.number(),\n});\n\nconst AgentRecentAuthorsSchema = z.array(z.string()).readonly();\n\nconst AgentModelConfigurationSchema = z.object({\n  providerId: ModelProviderIdSchema,\n  modelId: ModelLLMIdSchema,\n  temperature: z.number(),\n});\n\nconst LightAgentConfigurationSchema = z.object({\n  id: ModelIdSchema,\n  versionCreatedAt: z.string().nullable(),\n  sId: z.string(),\n  version: z.number(),\n  versionAuthorId: ModelIdSchema.nullable(),\n  instructions: z.string().nullable(),\n  model: AgentModelConfigurationSchema,\n  status: AgentConfigurationStatusSchema,\n  scope: AgentConfigurationScopeSchema,\n  userFavorite: z.boolean(),\n  name: z.string(),\n  description: z.string(),\n  pictureUrl: z.string(),\n  lastAuthors: AgentRecentAuthorsSchema.optional(),\n  usage: AgentUsageTypeSchema.optional(),\n  maxStepsPerRun: z.number(),\n  visualizationEnabled: z.boolean(),\n  templateId: z.string().nullable(),\n  groupIds: z.array(z.string()).optional(),\n  requestedGroupIds: z.array(z.array(z.string())),\n});\n\nexport type LightAgentConfigurationType = z.infer<\n  typeof LightAgentConfigurationSchema\n>;\n\nconst ContentFragmentContextSchema = z.object({\n  username: z.string().optional().nullable(),\n  fullName: z.string().optional().nullable(),\n  email: z.string().optional().nullable(),\n  profilePictureUrl: z.string().optional().nullable(),\n});\n\nexport const ContentNodeTypeSchema = z.union([\n  z.literal(\"document\"),\n  z.literal(\"table\"),\n  z.literal(\"folder\"),\n]);\n\nexport const ContentNodesViewTypeSchema = z.union([\n  z.literal(\"table\"),\n  z.literal(\"document\"),\n  z.literal(\"all\"),\n]);\n\nexport type ContentNodesViewType = z.infer<typeof ContentNodesViewTypeSchema>;\n\nconst ContentFragmentNodeData = z.object({\n  nodeId: z.string(),\n  nodeDataSourceViewId: z.string(),\n  nodeType: ContentNodeTypeSchema,\n  provider: ConnectorProvidersSchema.nullable(),\n  spaceName: z.string(),\n});\n\nconst ContentFragmentSchema = z.object({\n  id: ModelIdSchema,\n  sId: z.string(),\n  fileId: z.string().nullable(),\n  created: z.number(),\n  type: z.literal(\"content_fragment\"),\n  visibility: VisibilitySchema,\n  version: z.number(),\n  sourceUrl: z.string().nullable(),\n  textUrl: z.string(),\n  textBytes: z.number().nullable(),\n  title: z.string(),\n  contentType: SupportedContentFragmentTypeSchema,\n  context: ContentFragmentContextSchema,\n  contentFragmentId: z.string(),\n  contentFragmentVersion: z.union([\n    z.literal(\"latest\"),\n    z.literal(\"superseded\"),\n  ]),\n  contentNodeData: ContentFragmentNodeData.nullable(),\n});\nexport type ContentFragmentType = z.infer<typeof ContentFragmentSchema>;\n\nexport type UploadedContentFragmentType = {\n  fileId: string;\n  title: string;\n  url?: string;\n};\n\nconst AgentMentionSchema = z.object({\n  configurationId: z.string(),\n});\n\nexport type AgentMentionType = z.infer<typeof AgentMentionSchema>;\n\nconst UserMessageContextSchema = z.object({\n  username: z.string(),\n  timezone: Timezone,\n  fullName: z.string().optional().nullable(),\n  email: z.string().optional().nullable(),\n  profilePictureUrl: z.string().optional().nullable(),\n  origin: UserMessageOriginSchema,\n  clientSideMCPServerIds: z.array(z.string()).optional().nullable(),\n});\n\nconst UserMessageSchema = z.object({\n  id: ModelIdSchema,\n  created: z.number(),\n  type: z.literal(\"user_message\"),\n  sId: z.string(),\n  visibility: VisibilitySchema,\n  version: z.number(),\n  user: UserSchema.nullable(),\n  mentions: z.array(AgentMentionSchema),\n  content: z.string(),\n  context: UserMessageContextSchema,\n});\nexport type UserMessageType = z.infer<typeof UserMessageSchema>;\n\nconst UserMessageWithRankTypeSchema = UserMessageSchema.and(RankSchema);\n\nexport type UserMessageWithRankType = z.infer<\n  typeof UserMessageWithRankTypeSchema\n>;\n\nconst AgentActionTypeSchema = z.union([\n  RetrievalActionTypeSchema,\n  DustAppRunActionTypeSchema,\n  TablesQueryActionTypeSchema,\n  ProcessActionTypeSchema,\n  WebsearchActionTypeSchema,\n  BrowseActionTypeSchema,\n  ConversationListFilesActionTypeSchema,\n  ConversationIncludeFileActionTypeSchema,\n  ReasoningActionTypeSchema,\n  SearchLabelsActionTypeSchema,\n  MCPActionTypeSchema,\n]);\nexport type AgentActionPublicType = z.infer<typeof AgentActionTypeSchema>;\n\nconst AgentMessageStatusSchema = FlexibleEnumSchema<\n  \"created\" | \"succeeded\" | \"failed\" | \"cancelled\"\n>();\n\nconst AgentMessageTypeSchema = z.object({\n  id: ModelIdSchema,\n  agentMessageId: ModelIdSchema,\n  created: z.number(),\n  type: z.literal(\"agent_message\"),\n  sId: z.string(),\n  visibility: VisibilitySchema,\n  version: z.number(),\n  parentMessageId: z.string().nullable(),\n  configuration: LightAgentConfigurationSchema,\n  status: AgentMessageStatusSchema,\n  actions: z.array(AgentActionTypeSchema),\n  content: z.string().nullable(),\n  chainOfThought: z.string().nullable(),\n  rawContents: z.array(\n    z.object({\n      step: z.number(),\n      content: z.string(),\n    })\n  ),\n  error: z\n    .object({\n      code: z.string(),\n      message: z.string(),\n    })\n    .nullable(),\n});\nexport type AgentMessagePublicType = z.infer<typeof AgentMessageTypeSchema>;\n\nconst AgentMesssageFeedbackSchema = z.object({\n  messageId: z.string(),\n  agentMessageId: z.number(),\n  userId: z.number(),\n  thumbDirection: z.union([z.literal(\"up\"), z.literal(\"down\")]),\n  content: z.string().nullable(),\n  createdAt: z.number(),\n  agentConfigurationId: z.string(),\n  agentConfigurationVersion: z.number(),\n  isConversationShared: z.boolean(),\n});\n\nconst ConversationVisibilitySchema = FlexibleEnumSchema<\n  \"unlisted\" | \"workspace\" | \"deleted\" | \"test\"\n>();\n\nexport type ConversationVisibility = z.infer<\n  typeof ConversationVisibilitySchema\n>;\n\nconst ConversationWithoutContentSchema = z.object({\n  id: ModelIdSchema,\n  created: z.number(),\n  updated: z.number().optional(),\n  owner: WorkspaceSchema,\n  sId: z.string(),\n  title: z.string().nullable(),\n  visibility: ConversationVisibilitySchema,\n  groupIds: z.array(z.string()).optional(),\n  requestedGroupIds: z.array(z.array(z.string())),\n});\n\nexport const ConversationSchema = ConversationWithoutContentSchema.extend({\n  content: z.array(\n    z.union([\n      z.array(UserMessageSchema),\n      z.array(AgentMessageTypeSchema),\n      z.array(ContentFragmentSchema),\n    ])\n  ),\n});\n\nexport type ConversationWithoutContentPublicType = z.infer<\n  typeof ConversationWithoutContentSchema\n>;\nexport type ConversationPublicType = z.infer<typeof ConversationSchema>;\n\nconst ConversationMessageReactionsSchema = z.array(\n  z.object({\n    messageId: z.string(),\n    reactions: z.array(\n      z.object({\n        emoji: z.string(),\n        users: z.array(\n          z.object({\n            userId: ModelIdSchema.nullable(),\n            username: z.string(),\n            fullName: z.string().nullable(),\n          })\n        ),\n      })\n    ),\n  })\n);\n\nexport type ConversationMessageReactionsType = z.infer<\n  typeof ConversationMessageReactionsSchema\n>;\n\nconst BrowseParamsEventSchema = z.object({\n  type: z.literal(\"browse_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: BrowseActionTypeSchema,\n});\n\nconst ConversationIncludeFileParamsEventSchema = z.object({\n  type: z.literal(\"conversation_include_file_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: ConversationIncludeFileActionTypeSchema,\n});\n\nconst DustAppRunParamsEventSchema = z.object({\n  type: z.literal(\"dust_app_run_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: DustAppRunActionTypeSchema,\n});\n\nconst DustAppRunBlockEventSchema = z.object({\n  type: z.literal(\"dust_app_run_block\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: DustAppRunActionTypeSchema,\n});\n\nconst ProcessParamsEventSchema = z.object({\n  type: z.literal(\"process_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  dataSources: z.array(DataSourceConfigurationSchema),\n  action: ProcessActionTypeSchema,\n});\n\nconst RetrievalParamsEventSchema = z.object({\n  type: z.literal(\"retrieval_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  dataSources: z.array(DataSourceConfigurationSchema),\n  action: RetrievalActionTypeSchema,\n});\n\nconst TablesQueryStartedEventSchema = z.object({\n  type: z.literal(\"tables_query_started\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: TablesQueryActionTypeSchema,\n});\n\nconst TablesQueryModelOutputEventSchema = z.object({\n  type: z.literal(\"tables_query_model_output\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: TablesQueryActionTypeSchema,\n});\n\nconst TablesQueryOutputEventSchema = z.object({\n  type: z.literal(\"tables_query_output\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: TablesQueryActionTypeSchema,\n});\n\nconst WebsearchParamsEventSchema = z.object({\n  type: z.literal(\"websearch_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: WebsearchActionTypeSchema,\n});\n\nconst ReasoningStartedEventSchema = z.object({\n  type: z.literal(\"reasoning_started\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: ReasoningActionTypeSchema,\n});\n\nconst ReasoningThinkingEventSchema = z.object({\n  type: z.literal(\"reasoning_thinking\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: ReasoningActionTypeSchema,\n});\n\nconst ReasoningTokensEventSchema = z.object({\n  type: z.literal(\"reasoning_tokens\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: ReasoningActionTypeSchema,\n  content: z.string(),\n  classification: TokensClassificationSchema,\n});\n\nconst SearchLabelsParamsEventSchema = z.object({\n  type: z.literal(\"search_labels_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: SearchLabelsActionTypeSchema,\n});\n\nconst MCPParamsEventSchema = z.object({\n  type: z.literal(\"tool_params\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: MCPActionTypeSchema,\n});\n\nconst NotificationImageContentSchema = z.object({\n  type: z.literal(\"image\"),\n  mimeType: z.string(),\n});\n\nconst NotificationTextContentSchema = z.object({\n  type: z.literal(\"text\"),\n  text: z.string(),\n});\n\nconst NotificationContentSchema = z.union([\n  NotificationImageContentSchema,\n  NotificationTextContentSchema,\n]);\n\nconst MCPNotificationEventSchema = z.object({\n  type: z.literal(\"tool_notification\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: MCPActionTypeSchema,\n  notification: z.object({\n    progress: z.number(),\n    total: z.number(),\n    data: z.object({\n      label: z.string(),\n      output: NotificationContentSchema.optional(),\n    }),\n  }),\n});\n\nconst MCPValidationMetadataSchema = z.object({\n  mcpServerName: z.string(),\n  toolName: z.string(),\n  agentName: z.string(),\n});\n\nexport type MCPValidationMetadataPublicType = z.infer<\n  typeof MCPValidationMetadataSchema\n>;\n\nconst MCPApproveExecutionEventSchema = z.object({\n  type: z.literal(\"tool_approve_execution\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: MCPActionTypeSchema,\n  inputs: z.record(z.any()),\n  stake: z.optional(z.enum([\"low\", \"high\", \"never_ask\"])),\n  metadata: MCPValidationMetadataSchema,\n});\n\nconst AgentErrorEventSchema = z.object({\n  type: z.literal(\"agent_error\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  error: z.object({\n    code: z.string(),\n    message: z.string(),\n  }),\n});\nexport type AgentErrorEvent = z.infer<typeof AgentErrorEventSchema>;\n\nconst AgentActionSpecificEventSchema = z.union([\n  BrowseParamsEventSchema,\n  ConversationIncludeFileParamsEventSchema,\n  DustAppRunBlockEventSchema,\n  DustAppRunParamsEventSchema,\n  ProcessParamsEventSchema,\n  ReasoningStartedEventSchema,\n  ReasoningThinkingEventSchema,\n  ReasoningTokensEventSchema,\n  RetrievalParamsEventSchema,\n  SearchLabelsParamsEventSchema,\n  TablesQueryModelOutputEventSchema,\n  TablesQueryOutputEventSchema,\n  TablesQueryStartedEventSchema,\n  WebsearchParamsEventSchema,\n  MCPParamsEventSchema,\n  MCPNotificationEventSchema,\n  MCPApproveExecutionEventSchema,\n]);\nexport type AgentActionSpecificEvent = z.infer<\n  typeof AgentActionSpecificEventSchema\n>;\n\nconst AgentActionSuccessEventSchema = z.object({\n  type: z.literal(\"agent_action_success\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  action: AgentActionTypeSchema,\n});\nexport type AgentActionSuccessEvent = z.infer<\n  typeof AgentActionSuccessEventSchema\n>;\n\nconst AgentMessageSuccessEventSchema = z.object({\n  type: z.literal(\"agent_message_success\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  message: AgentMessageTypeSchema,\n  runIds: z.array(z.string()),\n});\nexport type AgentMessageSuccessEvent = z.infer<\n  typeof AgentMessageSuccessEventSchema\n>;\n\nconst AgentGenerationCancelledEventSchema = z.object({\n  type: z.literal(\"agent_generation_cancelled\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n});\nexport type AgentGenerationCancelledEvent = z.infer<\n  typeof AgentGenerationCancelledEventSchema\n>;\n\nconst UserMessageErrorEventSchema = z.object({\n  type: z.literal(\"user_message_error\"),\n  created: z.number(),\n  error: z.object({\n    code: z.string(),\n    message: z.string(),\n  }),\n});\nexport type UserMessageErrorEvent = z.infer<typeof UserMessageErrorEventSchema>;\n\n// Event sent when the user message is created.\nconst UserMessageNewEventSchema = z.object({\n  type: z.literal(\"user_message_new\"),\n  created: z.number(),\n  messageId: z.string(),\n  message: UserMessageSchema.and(RankSchema),\n});\nexport type UserMessageNewEvent = z.infer<typeof UserMessageNewEventSchema>;\n\n// Event sent when a new message is created (empty) and the agent is about to be executed.\nconst AgentMessageNewEventSchema = z.object({\n  type: z.literal(\"agent_message_new\"),\n  created: z.number(),\n  configurationId: z.string(),\n  messageId: z.string(),\n  message: AgentMessageTypeSchema.and(RankSchema),\n});\nexport type AgentMessageNewEvent = z.infer<typeof AgentMessageNewEventSchema>;\n\n// Event sent when the conversation title is updated.\nconst ConversationTitleEventSchema = z.object({\n  type: z.literal(\"conversation_title\"),\n  created: z.number(),\n  title: z.string(),\n});\nexport type ConversationTitleEvent = z.infer<\n  typeof ConversationTitleEventSchema\n>;\n\nconst ConversationEventTypeSchema = z.object({\n  eventId: z.string(),\n  data: z.union([\n    UserMessageNewEventSchema,\n    AgentMessageNewEventSchema,\n    AgentGenerationCancelledEventSchema,\n    ConversationTitleEventSchema,\n  ]),\n});\n\nexport type ConversationEventType = z.infer<typeof ConversationEventTypeSchema>;\n\nconst AgentMessageEventTypeSchema = z.object({\n  eventId: z.string(),\n  data: z.union([\n    AgentErrorEventSchema,\n    AgentActionSpecificEventSchema,\n    AgentActionSuccessEventSchema,\n    AgentGenerationCancelledEventSchema,\n    GenerationTokensEventSchema,\n  ]),\n});\n\nexport type AgentMessageEventType = z.infer<typeof AgentMessageEventTypeSchema>;\n\nexport const CoreAPIErrorSchema = z.object({\n  message: z.string(),\n  code: z.string(),\n});\n\nexport type CoreAPIError = z.infer<typeof CoreAPIErrorSchema>;\n\nexport const CoreAPITokenTypeSchema = z.tuple([z.number(), z.string()]);\nexport type CoreAPITokenType = z.infer<typeof CoreAPITokenTypeSchema>;\n\nconst APIErrorTypeSchema = FlexibleEnumSchema<\n  | \"action_api_error\"\n  | \"action_failed\"\n  | \"action_unknown_error\"\n  | \"agent_configuration_not_found\"\n  | \"agent_message_error\"\n  | \"app_auth_error\"\n  | \"app_not_found\"\n  | \"assistant_saving_error\"\n  | \"chat_message_not_found\"\n  | \"connector_credentials_error\"\n  | \"connector_not_found_error\"\n  | \"connector_oauth_target_mismatch\"\n  | \"connector_provider_not_supported\"\n  | \"connector_update_error\"\n  | \"connector_update_unauthorized\"\n  | \"content_too_large\"\n  | \"conversation_access_restricted\"\n  | \"conversation_not_found\"\n  | \"data_source_auth_error\"\n  | \"data_source_document_not_found\"\n  | \"data_source_error\"\n  | \"data_source_not_found\"\n  | \"data_source_not_managed\"\n  | \"data_source_quota_error\"\n  | \"data_source_view_not_found\"\n  | \"dataset_not_found\"\n  | \"dust_app_secret_not_found\"\n  | \"expired_oauth_token_error\"\n  | \"feature_flag_already_exists\"\n  | \"feature_flag_not_found\"\n  | \"file_not_found\"\n  | \"file_too_large\"\n  | \"file_type_not_supported\"\n  | \"global_agent_error\"\n  | \"group_not_found\"\n  | \"internal_server_error\"\n  | \"invalid_api_key_error\"\n  | \"invalid_oauth_token_error\"\n  | \"invalid_pagination_parameters\"\n  | \"invalid_request_error\"\n  | \"invalid_rows_request_error\"\n  | \"invitation_already_sent_recently\"\n  | \"invitation_not_found\"\n  | \"key_not_found\"\n  | \"malformed_authorization_header_error\"\n  | \"membership_not_found\"\n  | \"message_not_found\"\n  | \"method_not_supported_error\"\n  | \"missing_authorization_header_error\"\n  | \"not_authenticated\"\n  | \"personal_workspace_not_found\"\n  | \"plan_limit_error\"\n  | \"plan_message_limit_exceeded\"\n  | \"plugin_execution_failed\"\n  | \"plugin_not_found\"\n  | \"provider_auth_error\"\n  | \"provider_not_found\"\n  | \"rate_limit_error\"\n  | \"run_error\"\n  | \"run_not_found\"\n  | \"space_already_exists\"\n  | \"space_not_found\"\n  | \"stripe_invalid_product_id_error\"\n  | \"subscription_not_found\"\n  | \"subscription_payment_failed\"\n  | \"subscription_state_invalid\"\n  | \"table_not_found\"\n  | \"template_not_found\"\n  | \"template_not_found\"\n  | \"labs_connection_configuration_already_exists\"\n  | \"transcripts_configuration_already_exists\"\n  | \"transcripts_configuration_default_not_allowed\"\n  | \"transcripts_configuration_not_found\"\n  | \"unexpected_action_response\"\n  | \"unexpected_error_format\"\n  | \"unexpected_network_error\"\n  | \"unexpected_response_format\"\n  | \"user_not_found\"\n  | \"workspace_auth_error\"\n  | \"workspace_not_found\"\n  | \"workspace_not_found\"\n  | \"workspace_user_not_found\"\n>();\n\nexport const APIErrorSchema = z.object({\n  type: APIErrorTypeSchema,\n  message: z.string(),\n  data_source_error: CoreAPIErrorSchema.optional(),\n  run_error: CoreAPIErrorSchema.optional(),\n  app_error: CoreAPIErrorSchema.optional(),\n  connectors_error: ConnectorsAPIErrorSchema.optional(),\n});\nexport type APIError = z.infer<typeof APIErrorSchema>;\n\nexport const WorkspaceDomainSchema = z.object({\n  domain: z.string(),\n  domainAutoJoinEnabled: z.boolean(),\n});\n\nexport type WorkspaceDomainType = z.infer<typeof WorkspaceDomainSchema>;\n\nexport const DustAppTypeSchema = z.object({\n  appHash: z.string(),\n  appId: z.string(),\n  workspaceId: z.string(),\n});\n\nexport type DustAppType = z.infer<typeof DustAppTypeSchema>;\n\nexport const DustAppConfigTypeSchema = z.record(z.unknown());\nexport type DustAppConfigType = z.infer<typeof DustAppConfigTypeSchema>;\n\nexport const DustAppRunErroredEventSchema = z.object({\n  type: z.literal(\"error\"),\n  content: z.object({\n    code: z.string(),\n    message: z.string(),\n  }),\n});\nexport type DustAppRunErroredEvent = z.infer<\n  typeof DustAppRunErroredEventSchema\n>;\n\nexport const DustAppRunRunStatusEventSchema = z.object({\n  type: z.literal(\"run_status\"),\n  content: z.object({\n    status: z.enum([\"running\", \"succeeded\", \"errored\"]),\n    run_id: z.string(),\n  }),\n});\nexport type DustAppRunRunStatusEvent = z.infer<\n  typeof DustAppRunRunStatusEventSchema\n>;\n\nexport const DustAppRunBlockStatusEventSchema = z.object({\n  type: z.literal(\"block_status\"),\n  content: z.object({\n    block_type: BlockTypeSchema,\n    name: z.string(),\n    status: StatusSchema,\n    success_count: z.number(),\n    error_count: z.number(),\n  }),\n});\nexport type DustAppRunBlockStatusEvent = z.infer<\n  typeof DustAppRunBlockStatusEventSchema\n>;\n\nexport const DustAppRunBlockExecutionEventSchema = z.object({\n  type: z.literal(\"block_execution\"),\n  content: z.object({\n    block_type: BlockTypeSchema,\n    block_name: z.string(),\n    execution: z.array(\n      z.array(\n        z.object({\n          value: z.unknown().nullable(),\n          error: z.string().nullable(),\n          meta: z.unknown().nullable(),\n        })\n      )\n    ),\n  }),\n});\nexport type DustAppRunBlockExecutionEvent = z.infer<\n  typeof DustAppRunBlockExecutionEventSchema\n>;\nexport const DustAppRunFinalEventSchema = z.object({\n  type: z.literal(\"final\"),\n});\nexport type DustAppRunFinalEvent = z.infer<typeof DustAppRunFinalEventSchema>;\n\nexport const DustAppRunTokensEventSchema = z.object({\n  type: z.literal(\"tokens\"),\n  content: z.object({\n    block_type: z.string(),\n    block_name: z.string(),\n    input_index: z.number(),\n    map: z\n      .object({\n        name: z.string(),\n        iteration: z.number(),\n      })\n      .nullable(),\n    tokens: z.object({\n      text: z.string(),\n      tokens: z.array(z.string()).optional(),\n      logprobs: z.array(z.number()).optional(),\n    }),\n  }),\n});\nexport type DustAppRunTokensEvent = z.infer<typeof DustAppRunTokensEventSchema>;\n\nexport const DustAppRunFunctionCallEventSchema = z.object({\n  type: z.literal(\"function_call\"),\n  content: z.object({\n    block_type: z.string(),\n    block_name: z.string(),\n    input_index: z.number(),\n    map: z\n      .object({\n        name: z.string(),\n        iteration: z.number(),\n      })\n      .nullable(),\n    function_call: z.object({\n      name: z.string(),\n    }),\n  }),\n});\nexport type DustAppRunFunctionCallEvent = z.infer<\n  typeof DustAppRunFunctionCallEventSchema\n>;\n\nexport const DustAppRunFunctionCallArgumentsTokensEventSchema = z.object({\n  type: z.literal(\"function_call_arguments_tokens\"),\n  content: z.object({\n    block_type: z.string(),\n    block_name: z.string(),\n    input_index: z.number(),\n    map: z\n      .object({\n        name: z.string(),\n        iteration: z.number(),\n      })\n      .nullable(),\n    tokens: z.object({\n      text: z.string(),\n    }),\n  }),\n});\nexport type DustAppRunFunctionCallArgumentsTokensEvent = z.infer<\n  typeof DustAppRunFunctionCallArgumentsTokensEventSchema\n>;\nexport type DustAPICredentials = {\n  apiKey: string | (() => string | null | Promise<string | null>);\n  workspaceId: string;\n  extraHeaders?: Record<string, string>;\n};\n\nconst SpaceKindSchema = FlexibleEnumSchema<\n  \"regular\" | \"global\" | \"system\" | \"public\" | \"conversations\"\n>();\n\nconst SpaceTypeSchema = z.object({\n  createdAt: z.number(),\n  groupIds: z.array(z.string()),\n  isRestricted: z.boolean(),\n  kind: SpaceKindSchema,\n  name: z.string(),\n  sId: z.string(),\n  updatedAt: z.number(),\n});\n\nexport type SpaceType = z.infer<typeof SpaceTypeSchema>;\n\nconst DatasetSchemaEntryType = FlexibleEnumSchema<\n  \"string\" | \"number\" | \"boolean\" | \"json\"\n>();\n\nconst DatasetSchema = z.object({\n  name: z.string(),\n  description: z.string().nullable(),\n  data: z.array(z.record(z.any())).nullable().optional(),\n  schema: z\n    .array(\n      z.object({\n        key: z.string(),\n        type: DatasetSchemaEntryType,\n        description: z.string().nullable(),\n      })\n    )\n    .nullable()\n    .optional(),\n});\n\nconst AppTypeSchema = z.object({\n  id: ModelIdSchema,\n  sId: z.string(),\n  name: z.string(),\n  description: z.string().nullable(),\n  savedSpecification: z.string().nullable(),\n  savedConfig: z.string().nullable(),\n  savedRun: z.string().nullable(),\n  dustAPIProjectId: z.string(),\n  space: SpaceTypeSchema,\n  datasets: z.array(DatasetSchema).optional(),\n  coreSpecifications: z.record(z.string()).optional(),\n});\n\nexport type ApiAppType = z.infer<typeof AppTypeSchema>;\n\nconst AppImportTypeSchema = z.object({\n  id: ModelIdSchema.optional(),\n  sId: z.string(),\n  name: z.string(),\n  description: z.string().nullable(),\n  savedSpecification: z.string().nullable(),\n  savedConfig: z.string().nullable(),\n  savedRun: z.string().nullable(),\n  dustAPIProjectId: z.string(),\n  datasets: z.array(DatasetSchema).optional(),\n  coreSpecifications: z.record(z.string()).optional(),\n});\n\nexport type ApiAppImportType = z.infer<typeof AppImportTypeSchema>;\n\nexport const RunAppResponseSchema = z.object({\n  run: RunTypeSchema,\n});\n\nexport type RunAppResponseType = z.infer<typeof RunAppResponseSchema>;\n\nexport const GetDataSourcesResponseSchema = z.object({\n  data_sources: DataSourceTypeSchema.array(),\n});\n\nexport type GetDataSourcesResponseType = z.infer<\n  typeof GetDataSourcesResponseSchema\n>;\n\nexport const GetOrPatchAgentConfigurationResponseSchema = z.object({\n  agentConfiguration: LightAgentConfigurationSchema,\n});\n\nexport type GetOrPatchAgentConfigurationResponseType = z.infer<\n  typeof GetOrPatchAgentConfigurationResponseSchema\n>;\n\nexport const PatchAgentConfigurationRequestSchema = z.object({\n  userFavorite: z.boolean().optional(),\n});\n\nexport type PatchAgentConfigurationRequestType = z.infer<\n  typeof PatchAgentConfigurationRequestSchema\n>;\n\nexport const GetAgentConfigurationsResponseSchema = z.object({\n  agentConfigurations: LightAgentConfigurationSchema.array(),\n});\n\nexport type GetAgentConfigurationsResponseType = z.infer<\n  typeof GetAgentConfigurationsResponseSchema\n>;\n\nexport const PostContentFragmentResponseSchema = z.object({\n  contentFragment: ContentFragmentSchema,\n});\n\nexport type PostContentFragmentResponseType = z.infer<\n  typeof PostContentFragmentResponseSchema\n>;\n\nexport const CreateConversationResponseSchema = z.object({\n  conversation: ConversationSchema,\n  message: UserMessageSchema,\n});\n\nexport type CreateConversationResponseType = z.infer<\n  typeof CreateConversationResponseSchema\n>;\n\nexport const GetFeedbacksResponseSchema = z.object({\n  feedbacks: z.array(AgentMesssageFeedbackSchema),\n});\n\nexport type GetFeedbacksResponseType = z.infer<\n  typeof GetFeedbacksResponseSchema\n>;\n\nexport const PublicPostMessageFeedbackRequestBodySchema = z.object({\n  thumbDirection: z.string(),\n  feedbackContent: z.string().nullable().optional(),\n  isConversationShared: z.boolean().optional(),\n});\n\nexport type PublicPostMessageFeedbackRequestBody = z.infer<\n  typeof PublicPostMessageFeedbackRequestBodySchema\n>;\n\nexport const PostMessageFeedbackResponseSchema = z.object({\n  success: z.literal(true),\n});\n\nexport const PostUserMessageResponseSchema = z.object({\n  message: UserMessageSchema,\n});\n\nexport type PostUserMessageResponseType = z.infer<\n  typeof PostUserMessageResponseSchema\n>;\n\nexport const GetConversationResponseSchema = z.object({\n  conversation: ConversationSchema,\n});\n\nexport type GetConversationResponseType = z.infer<\n  typeof GetConversationResponseSchema\n>;\n\nexport const TokenizeResponseSchema = z.object({\n  tokens: CoreAPITokenTypeSchema.array(),\n});\n\nexport type TokenizeResponseType = z.infer<typeof TokenizeResponseSchema>;\n\nexport const GetActiveMemberEmailsInWorkspaceResponseSchema = z.object({\n  emails: z.array(z.string()),\n});\n\nexport type GetActiveMemberEmailsInWorkspaceResponseType = z.infer<\n  typeof GetActiveMemberEmailsInWorkspaceResponseSchema\n>;\n\nexport const GetWorkspaceVerifiedDomainsResponseSchema = z.object({\n  verified_domains: WorkspaceDomainSchema.array(),\n});\n\nexport type GetWorkspaceVerifiedDomainsResponseType = z.infer<\n  typeof GetWorkspaceVerifiedDomainsResponseSchema\n>;\n\nexport const GetWorkspaceFeatureFlagsResponseSchema = z.object({\n  feature_flags: WhitelistableFeaturesSchema.array(),\n});\n\nexport type GetWorkspaceFeatureFlagsResponseType = z.infer<\n  typeof GetWorkspaceFeatureFlagsResponseSchema\n>;\n\nexport const PublicPostMessagesRequestBodySchema = z.intersection(\n  z.object({\n    content: z.string().min(1),\n    mentions: z.array(\n      z.object({\n        configurationId: z.string(),\n      })\n    ),\n    context: UserMessageContextSchema.extend({\n      clientSideMCPServerIds: z.array(z.string()).optional().nullable(),\n    }),\n  }),\n  z\n    .object({\n      blocking: z.boolean().optional(),\n    })\n    .partial()\n);\n\nexport type PublicPostMessagesRequestBody = z.infer<\n  typeof PublicPostMessagesRequestBodySchema\n>;\n\nexport type PostMessagesResponseBody = {\n  message: UserMessageType;\n  agentMessages?: AgentMessagePublicType[];\n};\n\nexport const PublicPostEditMessagesRequestBodySchema = z.object({\n  content: z.string(),\n  mentions: z.array(\n    z.object({\n      configurationId: z.string(),\n    })\n  ),\n});\n\nexport type PublicPostEditMessagesRequestBody = z.infer<\n  typeof PublicPostEditMessagesRequestBodySchema\n>;\n\nexport const PublicContentFragmentWithContentSchema = z.object({\n  title: z.string(),\n  url: z.string().optional().nullable(),\n  content: z.string(),\n  contentType: z.string(),\n  fileId: z.undefined().nullable(),\n  nodeId: z.undefined().nullable(),\n  nodeDataSourceViewId: z.undefined().nullable(),\n  context: ContentFragmentContextSchema.optional().nullable(),\n  // Undocumented for now -- allows to supersede an existing content fragment.\n  supersededContentFragmentId: z.string().optional().nullable(),\n});\n\nexport type PublicContentFragmentWithContent = z.infer<\n  typeof PublicContentFragmentWithContentSchema\n>;\n\nexport const PublicContentFragmentWithFileIdSchema = z.object({\n  title: z.string(),\n  fileId: z.string(),\n  url: z.string().optional().nullable(),\n  content: z.undefined().nullable(),\n  contentType: z.undefined().nullable(),\n  nodeId: z.undefined().nullable(),\n  nodeDataSourceViewId: z.undefined().nullable(),\n  context: ContentFragmentContextSchema.optional().nullable(),\n  // Undocumented for now -- allows to supersede an existing content fragment.\n  supersededContentFragmentId: z.string().optional().nullable(),\n});\n\nexport type PublicContentFragmentWithFileId = z.infer<\n  typeof PublicContentFragmentWithFileIdSchema\n>;\n\nconst PublicContentFragmentWithContentNodeSchema = z.object({\n  title: z.string(),\n  nodeId: z.string(),\n  nodeDataSourceViewId: z.string(),\n  url: z.undefined().nullable(),\n  content: z.undefined().nullable(),\n  contentType: z.undefined().nullable(),\n  fileId: z.undefined().nullable(),\n  context: ContentFragmentContextSchema.optional().nullable(),\n  supersededContentFragmentId: z.string().optional().nullable(),\n});\n\nexport const PublicPostContentFragmentRequestBodySchema = z.union([\n  PublicContentFragmentWithContentSchema,\n  PublicContentFragmentWithFileIdSchema,\n  PublicContentFragmentWithContentNodeSchema,\n]);\n\nexport type PublicPostContentFragmentRequestBody = z.infer<\n  typeof PublicPostContentFragmentRequestBodySchema\n>;\n\nexport const PublicPostConversationsRequestBodySchema = z.intersection(\n  z.object({\n    title: z.string().nullable().optional(),\n    visibility: z\n      .enum([\"unlisted\", \"workspace\", \"deleted\", \"test\"])\n      .optional()\n      .default(\"unlisted\"),\n    message: z.union([\n      z.intersection(\n        z.object({\n          content: z.string().min(1),\n          mentions: z.array(\n            z.object({\n              configurationId: z.string(),\n            })\n          ),\n          context: UserMessageContextSchema,\n        }),\n        z\n          .object({\n            blocking: z.boolean().optional(),\n          })\n          .partial()\n      ),\n      z.undefined(),\n    ]),\n    contentFragment: z.union([\n      PublicContentFragmentWithContentSchema,\n      PublicContentFragmentWithFileIdSchema,\n      PublicContentFragmentWithContentNodeSchema,\n      z.undefined(),\n    ]),\n    contentFragments: z.union([\n      z\n        .union([\n          PublicContentFragmentWithContentSchema,\n          PublicContentFragmentWithFileIdSchema,\n          PublicContentFragmentWithContentNodeSchema,\n        ])\n        .array(),\n      z.undefined(),\n    ]),\n  }),\n  z\n    .object({\n      blocking: z.boolean().optional(),\n    })\n    .partial()\n);\n\nexport type PublicPostConversationsRequestBody = z.infer<\n  typeof PublicPostConversationsRequestBodySchema\n>;\n\nexport const PostConversationsResponseSchema = z.object({\n  conversation: ConversationSchema,\n  message: UserMessageSchema.optional(),\n  contentFragment: ContentFragmentSchema.optional(),\n});\n\nexport type PostConversationsResponseType = z.infer<\n  typeof PostConversationsResponseSchema\n>;\n\nexport const GetConversationsResponseSchema = z.object({\n  conversations: ConversationWithoutContentSchema.array(),\n});\nexport type GetConversationsResponseType = z.infer<\n  typeof GetConversationsResponseSchema\n>;\n\nexport const SearchDataSourceViewsRequestSchema = z.object({\n  dataSourceId: z.string().optional(),\n  kind: z.string().optional(),\n  vaultId: z.string().optional(),\n  vaultKind: z.string().optional(),\n});\n\nexport const SearchDataSourceViewsResponseSchema = z.object({\n  data_source_views: DataSourceViewSchema.array(),\n});\n\nexport type SearchDataSourceViewsResponseType = z.infer<\n  typeof SearchDataSourceViewsResponseSchema\n>;\n\nconst ListMemberEmailsResponseSchema = z.object({\n  emails: z.array(z.string()),\n});\n\nexport type ListMemberEmailsResponseType = z.infer<\n  typeof ListMemberEmailsResponseSchema\n>;\n\nexport const ValidateMemberRequestSchema = z.object({\n  email: z.string(),\n});\n\nconst ValidateMemberResponseSchema = z.object({\n  valid: z.boolean(),\n});\n\nexport type ValidateMemberResponseType = z.infer<\n  typeof ValidateMemberResponseSchema\n>;\n\nexport const GetAppsResponseSchema = z.object({\n  apps: AppTypeSchema.array(),\n});\n\nexport const PostAppsRequestSchema = z.object({\n  apps: AppImportTypeSchema.array(),\n});\n\nexport type GetAppsResponseType = z.infer<typeof GetAppsResponseSchema>;\n\nexport const ImportAppsResponseSchema = z.object({\n  apps: z\n    .object({\n      sId: z.string(),\n      name: z.string(),\n      error: z.string().optional(),\n    })\n    .array(),\n});\n\nexport type ImportAppsResponseType = z.infer<typeof ImportAppsResponseSchema>;\n\nexport const DataSourceViewResponseSchema = z.object({\n  dataSourceView: DataSourceViewSchema,\n});\n\nexport type DataSourceViewResponseType = z.infer<\n  typeof DataSourceViewResponseSchema\n>;\n\nexport const PatchDataSourceViewRequestSchema = z.union([\n  z\n    .object({\n      parentsToAdd: z.union([z.array(z.string()), z.undefined()]),\n      parentsToRemove: z.array(z.string()).optional(),\n    })\n    // For the fields to be not optional, see https://stackoverflow.com/questions/71477015/specify-a-zod-schema-with-a-non-optional-but-possibly-undefined-field\n    .transform((o) => ({\n      parentsToAdd: o.parentsToAdd,\n      parentsToRemove: o.parentsToRemove,\n    })),\n  z.object({\n    parentsIn: z.array(z.string()),\n  }),\n]);\n\nexport type PatchDataSourceViewRequestType = z.infer<\n  typeof PatchDataSourceViewRequestSchema\n>;\n\nexport const DataSourceSearchQuerySchema = z.object({\n  query: z.string(),\n  top_k: z.coerce.number(),\n  full_text: z.coerce.boolean(),\n  target_document_tokens: z.coerce.number().optional(),\n  timestamp_gt: z.coerce.number().optional(),\n  timestamp_lt: z.coerce.number().optional(),\n  tags_in: z.array(z.string()).optional(),\n  tags_not: z.array(z.string()).optional(),\n  parents_in: z.array(z.string()).optional(),\n  parents_not: z.array(z.string()).optional(),\n});\n\nexport type DataSourceSearchQuery = z.infer<typeof DataSourceSearchQuerySchema>;\n\nconst DataSourceSearchResponseSchema = z.object({\n  documents: CoreAPIDocumentSchema.array(),\n});\n\nexport type DataSourceSearchResponseType = z.infer<\n  typeof DataSourceSearchResponseSchema\n>;\n\nconst DataSourceViewsListResponseSchema = z.object({\n  dataSourceViews: DataSourceViewSchema.array(),\n});\n\nexport type DataSourceViewsListResponseType = z.infer<\n  typeof DataSourceViewsListResponseSchema\n>;\n\ntype FrontDataSourceDocumentSection = {\n  prefix: string | null;\n  content: string | null;\n  sections: FrontDataSourceDocumentSection[];\n};\n\nconst FrontDataSourceDocumentSectionSchema: z.ZodSchema<FrontDataSourceDocumentSection> =\n  z.lazy(() =>\n    z.object({\n      prefix: z.string().nullable(),\n      content: z.string().nullable(),\n      sections: z.array(FrontDataSourceDocumentSectionSchema),\n    })\n  );\n\nexport const PostDataSourceDocumentRequestSchema = z.object({\n  timestamp: z.number().nullable().optional(),\n  tags: z.array(z.string()).nullable().optional(),\n  parent_id: z.string().nullable().optional(),\n  parents: z.array(z.string()).nullable().optional(),\n  source_url: z.string().nullable().optional(),\n  upsert_context: z\n    .object({\n      sync_type: z.union([z.enum([\"batch\", \"incremental\"]), z.undefined()]),\n    }) // For the fields to be not optional, see https://stackoverflow.com/questions/71477015/specify-a-zod-schema-with-a-non-optional-but-possibly-undefined-field\n    .transform((o) => ({\n      sync_type: o.sync_type,\n    }))\n    .optional(),\n  text: z.string().nullable().optional(),\n  section: FrontDataSourceDocumentSectionSchema.nullable().optional(),\n  light_document_output: z.boolean().optional(),\n  async: z.boolean().nullable().optional(),\n  mime_type: z.string().nullable().optional(),\n  title: z.string().nullable().optional(),\n});\n\nexport type PostDataSourceDocumentRequestType = z.infer<\n  typeof PostDataSourceDocumentRequestSchema\n>;\n\nconst GetDocumentResponseSchema = z.object({\n  document: CoreAPIDocumentSchema,\n});\nexport type GetDocumentResponseType = z.infer<typeof GetDocumentResponseSchema>;\n\nconst DeleteDocumentResponseSchema = z.object({\n  document: z.object({\n    document_id: z.string(),\n  }),\n});\nexport type DeleteDocumentResponseType = z.infer<\n  typeof DeleteDocumentResponseSchema\n>;\n\nconst UpsertDocumentResponseSchema = z.object({\n  document: z.union([\n    CoreAPIDocumentSchema,\n    CoreAPILightDocumentSchema,\n    z.object({\n      document_id: z.string(),\n    }),\n  ]),\n  data_source: DataSourceTypeSchema,\n});\nexport type UpsertDocumentResponseType = z.infer<\n  typeof UpsertDocumentResponseSchema\n>;\n\nconst PostParentsResponseSchema = z.object({\n  updated: z.boolean(),\n});\nexport type PostParentsResponseType = z.infer<typeof PostParentsResponseSchema>;\n\nconst GetDocumentsResponseSchema = z.object({\n  documents: z.array(CoreAPIDocumentSchema),\n  total: z.number(),\n});\n\nexport type GetDocumentsResponseType = z.infer<\n  typeof GetDocumentsResponseSchema\n>;\n\nconst GetTableRowsResponseSchema = z.object({\n  row: CoreAPIRowSchema,\n});\n\nexport type GetTableRowsResponseType = z.infer<\n  typeof GetTableRowsResponseSchema\n>;\nexport const UpsertTableRowsRequestSchema = z.object({\n  rows: z.array(\n    z.object({\n      row_id: z.string(),\n      value: z.record(\n        z\n          .union([\n            z.string(),\n            z.number(),\n            z.boolean(),\n            z.object({\n              type: z.literal(\"datetime\"),\n              epoch: z.number(),\n            }),\n          ])\n          .nullable()\n      ),\n    })\n  ),\n  truncate: z.boolean().optional(),\n});\n\nexport type CellValueType = z.infer<\n  typeof UpsertTableRowsRequestSchema\n>[\"rows\"][number][\"value\"][string];\n\nconst UpsertTableRowsResponseSchema = z.object({\n  table: z.object({\n    name: z.string(),\n    table_id: z.string(),\n    description: z.string(),\n    schema: CoreAPITableSchema.nullable(),\n  }),\n});\n\nexport type UpsertTableRowsResponseType = z.infer<\n  typeof UpsertTableRowsResponseSchema\n>;\n\nconst ListTableRowsResponseSchema = z.object({\n  rows: z.array(CoreAPIRowSchema),\n  offset: z.number(),\n  limit: z.number(),\n  total: z.number(),\n});\nexport type ListTableRowsResponseType = z.infer<\n  typeof ListTableRowsResponseSchema\n>;\n\nconst GetTableResponseSchema = z.object({\n  table: CoreAPITablePublicSchema,\n});\nexport type GetTableResponseType = z.infer<typeof GetTableResponseSchema>;\n\nexport const PostTableParentsRequestSchema = z.object({\n  parent_id: z.string().nullable().optional(),\n  parents: z.array(z.string()),\n});\n\nconst PostTableParentsResponseSchema = z.object({\n  updated: z.literal(true),\n});\nexport type PostTableParentsResponseType = z.infer<\n  typeof PostTableParentsResponseSchema\n>;\n\nexport const UpsertTableFromCsvRequestSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  timestamp: z.number().nullable().optional(),\n  tags: z.array(z.string()).nullable().optional(),\n  parentId: z.string().nullable().optional(),\n  parents: z.array(z.string()).nullable().optional(),\n  truncate: z.boolean(),\n  async: z.boolean().optional(),\n  title: z.string(),\n  mimeType: z.string(),\n  sourceUrl: z.string().nullable().optional(),\n  tableId: z.string(),\n  fileId: z.string(),\n});\n\nexport type UpsertTableFromCsvRequestType = z.infer<\n  typeof UpsertTableFromCsvRequestSchema\n>;\n\nconst PostTableCSVAsyncResponseSchema = z.object({\n  table: z.object({\n    table_id: z.string(),\n  }),\n});\nexport type PostTableCSVAsyncResponseType = z.infer<\n  typeof PostTableCSVAsyncResponseSchema\n>;\n\nconst PostTableCSVResponseSchema = z.object({\n  table: CoreAPITableSchema,\n});\nexport type PostTableCSVResponseType = z.infer<\n  typeof PostTableCSVResponseSchema\n>;\n\nconst ListTablesResponseSchema = z.object({\n  tables: z.array(CoreAPITablePublicSchema),\n});\nexport type ListTablesResponseType = z.infer<typeof ListTablesResponseSchema>;\n\nexport const UpsertDatabaseTableRequestSchema = z.object({\n  table_id: z.string().optional(),\n  name: z.string(),\n  description: z.string(),\n  timestamp: z.number().nullable().optional(),\n  tags: z.array(z.string()).nullable().optional(),\n  parent_id: z.string().nullable().optional(),\n  parents: z.array(z.string()).nullable().optional(),\n  remote_database_table_id: z.string().nullable().optional(),\n  remote_database_secret_id: z.string().nullable().optional(),\n  title: z.string(),\n  mime_type: z.string().nullable().optional(),\n  source_url: z.string().nullable().optional(),\n});\n\nexport type UpsertDatabaseTableRequestType = z.infer<\n  typeof UpsertDatabaseTableRequestSchema\n>;\n\nconst UpsertTableResponseSchema = z.object({\n  table: CoreAPITablePublicSchema,\n});\nexport type UpsertTableResponseType = z.infer<typeof UpsertTableResponseSchema>;\n\nconst SupportedUsageTablesSchema = FlexibleEnumSchema<\n  | \"users\"\n  | \"assistant_messages\"\n  | \"builders\"\n  | \"assistants\"\n  | \"feedbacks\"\n  | \"all\"\n>();\n\nexport type UsageTableType = z.infer<typeof SupportedUsageTablesSchema>;\n\n// Folders\nconst CoreAPIFolderSchema = z.object({\n  data_source_id: z.string(),\n  folder_id: z.string(),\n  title: z.string(),\n  parents: z.array(z.string()),\n  timestamp: z.number(),\n});\n\nexport const GetFoldersResponseSchema = z.object({\n  folders: z.array(CoreAPIFolderSchema),\n  total: z.number(),\n});\nexport type GetFoldersResponseType = z.infer<typeof GetFoldersResponseSchema>;\n\nexport const GetFolderResponseSchema = z.object({\n  folder: CoreAPIFolderSchema,\n});\nexport type GetFolderResponseType = z.infer<typeof GetFolderResponseSchema>;\n\nexport const DeleteFolderResponseSchema = z.object({\n  folder: z.object({\n    folder_id: z.string(),\n  }),\n});\nexport type DeleteFolderResponseType = z.infer<\n  typeof DeleteFolderResponseSchema\n>;\nexport const UpsertFolderResponseSchema = z.object({\n  folder: CoreAPIFolderSchema,\n  data_source: DataSourceTypeSchema,\n});\nexport type UpsertFolderResponseType = z.infer<\n  typeof UpsertFolderResponseSchema\n>;\n\nconst ProviderVisibilitySchema = FlexibleEnumSchema<\"public\" | \"private\">();\n\nexport const UpsertDataSourceFolderRequestSchema = z.object({\n  timestamp: z.number(),\n  parents: z.array(z.string()).nullable().optional(),\n  parent_id: z.string().nullable().optional(),\n  title: z.string(),\n  mime_type: z.string(),\n  source_url: z.string().nullable().optional(),\n  provider_visibility: ProviderVisibilitySchema.nullable().optional(),\n});\nexport type UpsertDataSourceFolderRequestType = z.infer<\n  typeof UpsertDataSourceFolderRequestSchema\n>;\n\nconst DateSchema = z\n  .string()\n  .refine(\n    (s): s is string => /^\\d{4}-(0[1-9]|1[0-2])(-([0-2]\\d|3[01]))?$/.test(s),\n    \"YYYY-MM or YYYY-MM-DD\"\n  );\n\nexport const GetWorkspaceUsageRequestSchema = z.union([\n  z.object({\n    start: DateSchema,\n    end: z.undefined(),\n    mode: z.literal(\"month\"),\n    table: SupportedUsageTablesSchema,\n    format: z.enum([\"csv\", \"json\"]).optional().default(\"csv\"),\n  }),\n  z.object({\n    start: DateSchema,\n    end: DateSchema,\n    mode: z.literal(\"range\"),\n    table: SupportedUsageTablesSchema,\n    format: z.enum([\"csv\", \"json\"]).optional().default(\"csv\"),\n  }),\n]);\n\nexport type GetWorkspaceUsageRequestType = z.infer<\n  typeof GetWorkspaceUsageRequestSchema\n>;\n\nexport const FileUploadUrlRequestSchema = z.object({\n  contentType: SupportedFileContentFragmentTypeSchema,\n  fileName: z.string().max(4096, \"File name must be less than 4096 characters\"),\n  fileSize: z.number(),\n  useCase: z.union([z.literal(\"conversation\"), z.literal(\"upsert_table\")]),\n  useCaseMetadata: z\n    .object({\n      conversationId: z.string(),\n    })\n    .optional(),\n});\nexport type FileUploadUrlRequestType = z.infer<\n  typeof FileUploadUrlRequestSchema\n>;\n\nconst FileTypeStatusSchema = FlexibleEnumSchema<\n  \"created\" | \"failed\" | \"ready\"\n>();\n\nconst FileTypeUseCaseSchema = FlexibleEnumSchema<\n  | \"conversation\"\n  | \"avatar\"\n  | \"tool_output\"\n  | \"upsert_document\"\n  | \"upsert_table\"\n  // See also front/types/files.ts.\n  | \"folders_document\"\n>();\n\nexport const FileTypeSchema = z.object({\n  // TODO(spolu): move this to ModelIdSchema\n  id: z.string(),\n  sId: z.string(),\n  contentType: z.string(),\n  downloadUrl: z.string().optional(),\n  fileName: z.string(),\n  fileSize: z.number(),\n  status: FileTypeStatusSchema,\n  uploadUrl: z.string().optional(),\n  publicUrl: z.string().optional(),\n  useCase: FileTypeUseCaseSchema,\n});\nexport type FileType = z.infer<typeof FileTypeSchema>;\n\nexport const FileTypeWithUploadUrlSchema = FileTypeSchema.extend({\n  uploadUrl: z.string(),\n});\n\nexport const FileUploadRequestResponseSchema = z.object({\n  file: FileTypeWithUploadUrlSchema,\n});\nexport type FileUploadRequestResponseType = z.infer<\n  typeof FileUploadRequestResponseSchema\n>;\nexport const FileUploadedRequestResponseSchema = z.object({\n  file: FileTypeSchema,\n});\nexport type FileUploadedRequestResponseType = z.infer<\n  typeof FileUploadedRequestResponseSchema\n>;\n\nexport const MeResponseSchema = z.object({\n  user: UserSchema.and(\n    z.object({\n      workspaces: WorkspaceSchema.array().or(ExtensionWorkspaceSchema.array()),\n    })\n  ),\n});\n\nexport type MeResponseType = z.infer<typeof MeResponseSchema>;\n\nexport const CancelMessageGenerationResponseSchema = z.object({\n  success: z.literal(true),\n});\n\nexport type CancelMessageGenerationResponseType = z.infer<\n  typeof CancelMessageGenerationResponseSchema\n>;\n\nexport const CancelMessageGenerationRequestSchema = z.object({\n  messageIds: z.array(z.string()),\n});\n\nexport type CancelMessageGenerationRequestType = z.infer<\n  typeof CancelMessageGenerationRequestSchema\n>;\n\n// Typeguards.\n\nexport function isRetrievalActionType(\n  action: AgentActionPublicType\n): action is RetrievalActionPublicType {\n  return action.type === \"retrieval_action\";\n}\n\nexport function isWebsearchActionType(\n  action: AgentActionPublicType\n): action is WebsearchActionPublicType {\n  return action.type === \"websearch_action\";\n}\n\nexport function isTablesQueryActionType(\n  action: AgentActionPublicType\n): action is TablesQueryActionPublicType {\n  return action.type === \"tables_query_action\";\n}\n\nexport function isDustAppRunActionType(\n  action: AgentActionPublicType\n): action is DustAppRunActionPublicType {\n  return action.type === \"dust_app_run_action\";\n}\n\nexport function isProcessActionType(\n  action: AgentActionPublicType\n): action is ProcessActionPublicType {\n  return action.type === \"process_action\";\n}\n\nexport function BrowseActionPublicType(\n  action: AgentActionPublicType\n): action is BrowseActionPublicType {\n  return action.type === \"browse_action\";\n}\n\nexport function isReasoningActionType(\n  action: AgentActionPublicType\n): action is ReasoningActionPublicType {\n  return action.type === \"reasoning_action\";\n}\n\nexport function isSearchLabelsActionType(\n  action: AgentActionPublicType\n): action is SearchLabelsActionPublicType {\n  return action.type === \"search_labels_action\";\n}\n\nexport function isAgentMention(arg: AgentMentionType): arg is AgentMentionType {\n  return (arg as AgentMentionType).configurationId !== undefined;\n}\n\nexport function assertNever(x: never): never {\n  throw new Error(\n    `${\n      typeof x === \"object\" ? JSON.stringify(x) : x\n    } is not of type never. This should never happen.`\n  );\n}\n\nexport function removeNulls<T>(arr: (T | null | undefined)[]): T[] {\n  return arr.filter((v): v is T => v !== null && v !== undefined);\n}\n\ntype ConnectorProviderDocumentType =\n  | Exclude<ConnectorProvider, \"webcrawler\">\n  | \"document\";\n\nexport function getProviderFromRetrievedDocument(\n  document: RetrievalDocumentPublicType\n): ConnectorProviderDocumentType {\n  if (document.dataSourceView) {\n    if (document.dataSourceView.dataSource.connectorProvider === \"webcrawler\") {\n      return \"document\";\n    }\n    return document.dataSourceView.dataSource.connectorProvider || \"document\";\n  }\n  return \"document\";\n}\n\nexport function getTitleFromRetrievedDocument(\n  document: RetrievalDocumentPublicType\n): string {\n  const provider = getProviderFromRetrievedDocument(document);\n\n  if (provider === \"slack\") {\n    for (const t of document.tags) {\n      if (t.startsWith(\"channelName:\")) {\n        return `#${t.substring(12)}`;\n      }\n    }\n  }\n\n  for (const t of document.tags) {\n    if (t.startsWith(\"title:\")) {\n      return t.substring(6);\n    }\n  }\n\n  return document.documentId;\n}\n\nexport const AppsCheckRequestSchema = z.object({\n  apps: z.array(\n    z.object({\n      appId: z.string(),\n      appHash: z.string(),\n    })\n  ),\n});\n\nexport type AppsCheckRequestType = z.infer<typeof AppsCheckRequestSchema>;\n\nexport const AppsCheckResponseSchema = z.object({\n  apps: z.array(\n    z.object({\n      appId: z.string(),\n      appHash: z.string(),\n      deployed: z.boolean(),\n    })\n  ),\n});\n\nexport type AppsCheckResponseType = z.infer<typeof AppsCheckResponseSchema>;\n\nexport const GetSpacesResponseSchema = z.object({\n  spaces: z.array(SpaceTypeSchema),\n});\n\nexport type GetSpacesResponseType = z.infer<typeof GetSpacesResponseSchema>;\n\nexport const BaseSearchBodySchema = z.object({\n  viewType: ContentNodesViewTypeSchema,\n  spaceIds: z.array(z.string()),\n  includeDataSources: z.boolean(),\n  limit: z.number(),\n});\n\nconst TextSearchBodySchema = z.intersection(\n  BaseSearchBodySchema,\n  z.object({\n    query: z.string(),\n    nodeIds: z.undefined().optional(),\n  })\n);\n\nconst NodeIdSearchBodySchema = z.intersection(\n  BaseSearchBodySchema,\n  z.object({\n    nodeIds: z.array(z.string()),\n    query: z.undefined().optional(),\n  })\n);\n\nexport const SearchRequestBodySchema = z.union([\n  TextSearchBodySchema,\n  NodeIdSearchBodySchema,\n]);\n\nexport type SearchRequestBodyType = z.infer<typeof SearchRequestBodySchema>;\n\nexport const ContentNodeSchema = z.object({\n  expandable: z.boolean(),\n  internalId: z.string(),\n  lastUpdatedAt: z.number().nullable(),\n  mimeType: z.string(),\n  // The direct parent ID of this content node\n  parentInternalId: z.string().nullable(),\n  // permission: ConnectorPermissionSchema,\n  preventSelection: z.boolean().optional(),\n  providerVisibility: ProviderVisibilitySchema.nullable().optional(),\n  sourceUrl: z.string().nullable().optional(),\n  title: z.string(),\n  type: ContentNodeTypeSchema,\n});\n\nexport type ContentNodeType = z.infer<typeof ContentNodeSchema>;\n\nexport const ContentNodeWithParentSchema = z.intersection(\n  ContentNodeSchema,\n  z.object({\n    parentsInternalIds: z.array(z.string()).optional(),\n    parentTitle: z.string().optional().nullable(),\n  })\n);\n\nexport const DataSourceContentNodeSchema = z.intersection(\n  ContentNodeWithParentSchema,\n  z.object({\n    dataSource: DataSourceTypeSchema,\n    dataSourceViews: DataSourceViewSchema.array(),\n  })\n);\n\nexport type DataSourceContentNodeType = z.infer<\n  typeof DataSourceContentNodeSchema\n>;\n\nexport const DataSourceViewContentNodeSchema = z.intersection(\n  ContentNodeWithParentSchema,\n  z.object({\n    dataSourceView: DataSourceViewSchema,\n  })\n);\n\nexport type DataSourceViewContentNodeType = z.infer<\n  typeof DataSourceViewContentNodeSchema\n>;\n\nexport const SearchWarningCodeSchema = z.literal(\"truncated-query-clauses\");\n\nexport type SearchWarningCode = z.infer<typeof SearchWarningCodeSchema>;\n\nexport const PostWorkspaceSearchResponseBodySchema = z.object({\n  nodes: DataSourceContentNodeSchema.array(),\n  warningCode: SearchWarningCodeSchema.optional().nullable(),\n});\n\nexport type PostWorkspaceSearchResponseBodyType = z.infer<\n  typeof PostWorkspaceSearchResponseBodySchema\n>;\n\n// TODO(mcp) move somewhere else as we'll need dynamic labels for MCP.\nexport const ACTION_RUNNING_LABELS: Record<\n  AgentActionPublicType[\"type\"],\n  string\n> = {\n  browse_action: \"Browsing page\",\n  conversation_include_file_action: \"Reading file\",\n  conversation_list_files_action: \"Listing files\",\n  dust_app_run_action: \"Running App\",\n  process_action: \"Extracting data\",\n  reasoning_action: \"Reasoning\",\n  retrieval_action: \"Searching data\",\n  search_labels_action: \"Searching labels\",\n  tables_query_action: \"Querying tables\",\n  websearch_action: \"Searching the web\",\n  tool_action: \"Using a tool\",\n};\n\n// MCP Related.\n\nexport const ValidateActionResponseSchema = z.object({\n  success: z.boolean(),\n});\n\nexport type ValidateActionResponseType = z.infer<\n  typeof ValidateActionResponseSchema\n>;\n\nexport const ValidateActionRequestBodySchema = z.object({\n  actionId: z.number(),\n  approved: z.enum([\"approved\", \"rejected\", \"always_approved\"]),\n});\n\nexport type ValidateActionRequestBodyType = z.infer<\n  typeof ValidateActionRequestBodySchema\n>;\n\nexport const RegisterMCPResponseSchema = z.object({\n  success: z.boolean(),\n  expiresAt: z.string(),\n});\n\nexport type RegisterMCPResponseType = z.infer<typeof RegisterMCPResponseSchema>;\n\nexport const HeartbeatMCPResponseSchema = z.object({\n  success: z.boolean(),\n  expiresAt: z.string(),\n});\n\nexport type HeartbeatMCPResponseType = z.infer<\n  typeof HeartbeatMCPResponseSchema\n>;\n\nexport const PublicPostMCPResultsRequestBodySchema = z.object({\n  requestId: z.string(),\n  result: z.unknown(),\n});\n\nexport type PublicPostMCPResultsRequestBody = z.infer<\n  typeof PublicPostMCPResultsRequestBodySchema\n>;\n\nexport const PostMCPResultsResponseSchema = z.object({\n  success: z.boolean(),\n});\n\nexport type PostMCPResultsResponseType = z.infer<\n  typeof PostMCPResultsResponseSchema\n>;\n\nconst REMOTE_MCP_TOOL_STAKE_LEVELS = [\"high\", \"low\"] as const;\nexport type RemoteMCPToolStakeLevelPublicType =\n  (typeof REMOTE_MCP_TOOL_STAKE_LEVELS)[number];\nconst MCP_TOOL_STAKE_LEVELS = [\n  ...REMOTE_MCP_TOOL_STAKE_LEVELS,\n  \"never_ask\",\n] as const;\nexport type MCPToolStakeLevelPublicType = (typeof MCP_TOOL_STAKE_LEVELS)[number];\n\nconst MCP_VALIDATION_OUTPUTS = [\n  \"approved\",\n  \"rejected\",\n  \"always_approved\",\n] as const;\nexport type MCPValidationOutputPublicType =\n  (typeof MCP_VALIDATION_OUTPUTS)[number];\n","import { ConnectorProvider } from \"./types\";\n\n/**\n * This is a utility type that indicates that we removed all underscores from a string.\n * This is used because we don't want underscores in mime types and remove them from connector providers.\n */\ntype WithoutUnderscores<T extends string> = T extends `${infer A}_${infer B}`\n  ? WithoutUnderscores<`${A}${B}`> // operates recursively to remove all underscores\n  : T;\n\n/**\n * This is a utility type that indicates that we replaced all underscores with dashes in a string.\n * We don't want underscores in mime types but want to type out the type with one: MIME_TYPE.CAT.SOU_PI_NOU\n */\ntype UnderscoreToDash<T extends string> = T extends `${infer A}_${infer B}`\n  ? UnderscoreToDash<`${A}-${B}`> // operates recursively to replace all underscores\n  : T;\n\n/**\n * This function generates mime types for a given provider and resource types.\n * The mime types are in the format `application/vnd.dust.PROVIDER.RESOURCE_TYPE`.\n * Notes:\n * - The underscores in the provider name are stripped in the generated mime type.\n * - The underscores in the resource type are replaced with dashes in the generated mime type.\n */\nfunction generateConnectorRelativeMimeTypes<\n  P extends ConnectorProvider,\n  T extends Uppercase<string>[]\n>({\n  provider,\n  resourceTypes,\n}: {\n  provider: P;\n  resourceTypes: T;\n}): {\n  [K in T[number]]: `application/vnd.dust.${WithoutUnderscores<P>}.${Lowercase<\n    UnderscoreToDash<K>\n  >}`;\n} {\n  return resourceTypes.reduce(\n    (acc, s) => ({\n      ...acc,\n      [s]: `application/vnd.dust.${provider.replace(\"_\", \"\")}.${s\n        .replace(\"_\", \"-\")\n        .toLowerCase()}`,\n    }),\n    {} as {\n      [K in T[number]]: `application/vnd.dust.${WithoutUnderscores<P>}.${Lowercase<\n        UnderscoreToDash<K>\n      >}`;\n    }\n  );\n}\n\n// Mime type that represents a datasource.\nexport const DATA_SOURCE_MIME_TYPE = \"application/vnd.dust.datasource\" as const;\n\ntype DataSourceMimeType = typeof DATA_SOURCE_MIME_TYPE;\n\nexport const CONTENT_NODE_MIME_TYPES = {\n  GENERIC: { DATA_SOURCE: DATA_SOURCE_MIME_TYPE },\n  CONFLUENCE: generateConnectorRelativeMimeTypes({\n    provider: \"confluence\",\n    resourceTypes: [\"SPACE\", \"PAGE\"],\n  }),\n  GITHUB: generateConnectorRelativeMimeTypes({\n    provider: \"github\",\n    resourceTypes: [\n      \"REPOSITORY\",\n      \"CODE_ROOT\",\n      \"CODE_DIRECTORY\",\n      \"CODE_FILE\",\n      // ISSUES is the folder containing all issues.\n      \"ISSUES\",\n      // ISSUE is a single issue.\n      \"ISSUE\",\n      // DISCUSSIONS is the folder containing all discussions.\n      \"DISCUSSIONS\",\n      // DISCUSSION is a single discussion.\n      \"DISCUSSION\",\n    ],\n  }),\n  GOOGLE_DRIVE: generateConnectorRelativeMimeTypes({\n    provider: \"google_drive\",\n    // Spreadsheets may contain many sheets, thus resemble folders and are stored as such, but with\n    // the special mimeType below.  For files and sheets, we keep Google's mime types.\n    resourceTypes: [\"SHARED_WITH_ME\", \"FOLDER\", \"SPREADSHEET\"],\n  }),\n  INTERCOM: generateConnectorRelativeMimeTypes({\n    provider: \"intercom\",\n    resourceTypes: [\n      \"COLLECTION\",\n      \"TEAMS_FOLDER\",\n      \"CONVERSATION\",\n      \"TEAM\",\n      \"ARTICLE\",\n      \"HELP_CENTER\",\n    ],\n  }),\n  MICROSOFT: generateConnectorRelativeMimeTypes({\n    provider: \"microsoft\",\n    // Spreadsheets may contain many sheets, thus resemble folders and are\n    // stored as such, but with the special mimeType below.\n    // For files and sheets, we keep Microsoft's mime types.\n    resourceTypes: [\"FOLDER\", \"SPREADSHEET\"],\n  }),\n  NOTION: generateConnectorRelativeMimeTypes({\n    provider: \"notion\",\n    resourceTypes: [\"UNKNOWN_FOLDER\", \"SYNCING_FOLDER\", \"DATABASE\", \"PAGE\"],\n  }),\n  SLACK: generateConnectorRelativeMimeTypes({\n    provider: \"slack\",\n    resourceTypes: [\"CHANNEL\", \"THREAD\", \"MESSAGES\"],\n  }),\n  SNOWFLAKE: generateConnectorRelativeMimeTypes({\n    provider: \"snowflake\",\n    resourceTypes: [\"DATABASE\", \"SCHEMA\", \"TABLE\"],\n  }),\n  WEBCRAWLER: generateConnectorRelativeMimeTypes({\n    provider: \"webcrawler\",\n    resourceTypes: [\"FOLDER\"], // pages are upserted as text/html, not an internal mime type\n  }),\n  ZENDESK: generateConnectorRelativeMimeTypes({\n    provider: \"zendesk\",\n    resourceTypes: [\n      \"BRAND\",\n      \"HELP_CENTER\",\n      \"CATEGORY\",\n      \"ARTICLE\",\n      // TICKETS is the folder containing all tickets.\n      \"TICKETS\",\n      // TICKET is a single ticket.\n      \"TICKET\",\n    ],\n  }),\n  BIGQUERY: generateConnectorRelativeMimeTypes({\n    provider: \"bigquery\",\n    resourceTypes: [\"DATABASE\", \"SCHEMA\", \"TABLE\"],\n  }),\n  SALESFORCE: generateConnectorRelativeMimeTypes({\n    provider: \"salesforce\",\n    resourceTypes: [\"DATABASE\", \"SCHEMA\", \"TABLE\"],\n  }),\n  GONG: generateConnectorRelativeMimeTypes({\n    provider: \"gong\",\n    resourceTypes: [\"TRANSCRIPT\", \"TRANSCRIPT_FOLDER\"],\n  }),\n};\n\nexport const INCLUDABLE_INTERNAL_CONTENT_NODE_MIME_TYPES = {\n  CONFLUENCE: [CONTENT_NODE_MIME_TYPES.CONFLUENCE.PAGE],\n  GITHUB: [\n    CONTENT_NODE_MIME_TYPES.GITHUB.ISSUE,\n    CONTENT_NODE_MIME_TYPES.GITHUB.DISCUSSION,\n  ],\n  GOOGLE_DRIVE: [],\n  INTERCOM: [\n    CONTENT_NODE_MIME_TYPES.INTERCOM.CONVERSATION,\n    CONTENT_NODE_MIME_TYPES.INTERCOM.ARTICLE,\n  ],\n  MICROSOFT: [],\n  NOTION: [CONTENT_NODE_MIME_TYPES.NOTION.PAGE],\n  SLACK: [\n    CONTENT_NODE_MIME_TYPES.SLACK.THREAD,\n    CONTENT_NODE_MIME_TYPES.SLACK.MESSAGES,\n  ],\n  SNOWFLAKE: [],\n  WEBCRAWLER: [],\n  ZENDESK: [\n    CONTENT_NODE_MIME_TYPES.ZENDESK.TICKET,\n    CONTENT_NODE_MIME_TYPES.ZENDESK.ARTICLE,\n  ],\n  BIGQUERY: [],\n  SALESFORCE: [],\n  GONG: [],\n};\n\nfunction generateToolMimeTypes<\n  P extends Uppercase<string>,\n  T extends Uppercase<string>[]\n>({\n  category,\n  resourceTypes,\n}: {\n  category: P;\n  resourceTypes: T;\n}): {\n  [K in T[number]]: `application/vnd.dust.${Lowercase<\n    UnderscoreToDash<P>\n  >}.${Lowercase<UnderscoreToDash<K>>}`;\n} {\n  return resourceTypes.reduce(\n    (acc, s) => ({\n      ...acc,\n      [s]: `application/vnd.dust.${category\n        .replace(/_/g, \"-\")\n        .toLowerCase()}.${s.replace(/_/g, \"-\").toLowerCase()}`,\n    }),\n    {} as {\n      [K in T[number]]: `application/vnd.dust.${Lowercase<\n        UnderscoreToDash<P>\n      >}.${Lowercase<UnderscoreToDash<K>>}`;\n    }\n  );\n}\n\nconst TOOL_MIME_TYPES = {\n  TOOL_INPUT: generateToolMimeTypes({\n    category: \"TOOL_INPUT\",\n    resourceTypes: [\n      \"DATA_SOURCE\",\n      \"TABLE\",\n      \"CHILD_AGENT\",\n      \"STRING\",\n      \"NUMBER\",\n      \"BOOLEAN\",\n      \"ENUM\",\n      \"REASONING_MODEL\",\n      \"NULLABLE_TIME_FRAME\",\n    ],\n  }),\n  TOOL_OUTPUT: generateToolMimeTypes({\n    category: \"TOOL_OUTPUT\",\n    resourceTypes: [\n      \"BROWSE_RESULT\",\n      \"DATA_SOURCE_SEARCH_QUERY\",\n      \"DATA_SOURCE_SEARCH_RESULT\",\n      \"DATA_SOURCE_INCLUDE_QUERY\",\n      \"DATA_SOURCE_INCLUDE_RESULT\",\n      // File generated by the tool.\n      \"FILE\",\n      // Final output of the reasoning when successful with the non-CoT tokens.\n      \"REASONING_SUCCESS\",\n      // Content of a SQL query formulated by the model.\n      \"SQL_QUERY\",\n      // Generic thinking tokens.\n      \"THINKING\",\n      \"WEBSEARCH_QUERY\",\n      \"WEBSEARCH_RESULT\",\n    ],\n  }),\n};\n\nexport const INTERNAL_MIME_TYPES = {\n  ...CONTENT_NODE_MIME_TYPES,\n  ...TOOL_MIME_TYPES,\n};\n\nexport const INTERNAL_MIME_TYPES_VALUES = Object.values(\n  CONTENT_NODE_MIME_TYPES\n).flatMap((value) => Object.values(value).map((v) => v));\n\nexport const INCLUDABLE_INTERNAL_MIME_TYPES_VALUES = Object.values(\n  INCLUDABLE_INTERNAL_CONTENT_NODE_MIME_TYPES\n).flatMap((value) => Object.values(value).map((v) => v));\n\nexport type BigQueryMimeType =\n  (typeof INTERNAL_MIME_TYPES.BIGQUERY)[keyof typeof INTERNAL_MIME_TYPES.BIGQUERY];\n\nexport type ConfluenceMimeType =\n  (typeof INTERNAL_MIME_TYPES.CONFLUENCE)[keyof typeof INTERNAL_MIME_TYPES.CONFLUENCE];\n\nexport type GithubMimeType =\n  (typeof INTERNAL_MIME_TYPES.GITHUB)[keyof typeof INTERNAL_MIME_TYPES.GITHUB];\n\nexport type GoogleDriveMimeType =\n  (typeof INTERNAL_MIME_TYPES.GOOGLE_DRIVE)[keyof typeof INTERNAL_MIME_TYPES.GOOGLE_DRIVE];\n\nexport type IntercomMimeType =\n  (typeof INTERNAL_MIME_TYPES.INTERCOM)[keyof typeof INTERNAL_MIME_TYPES.INTERCOM];\n\nexport type MicrosoftMimeType =\n  (typeof INTERNAL_MIME_TYPES.MICROSOFT)[keyof typeof INTERNAL_MIME_TYPES.MICROSOFT];\n\nexport type NotionMimeType =\n  (typeof INTERNAL_MIME_TYPES.NOTION)[keyof typeof INTERNAL_MIME_TYPES.NOTION];\n\nexport type SlackMimeType =\n  (typeof INTERNAL_MIME_TYPES.SLACK)[keyof typeof INTERNAL_MIME_TYPES.SLACK];\n\nexport type SnowflakeMimeType =\n  (typeof INTERNAL_MIME_TYPES.SNOWFLAKE)[keyof typeof INTERNAL_MIME_TYPES.SNOWFLAKE];\n\nexport type WebcrawlerMimeType =\n  (typeof INTERNAL_MIME_TYPES.WEBCRAWLER)[keyof typeof INTERNAL_MIME_TYPES.WEBCRAWLER];\n\nexport type ZendeskMimeType =\n  (typeof INTERNAL_MIME_TYPES.ZENDESK)[keyof typeof INTERNAL_MIME_TYPES.ZENDESK];\n\nexport type SalesforceMimeType =\n  (typeof INTERNAL_MIME_TYPES.SALESFORCE)[keyof typeof INTERNAL_MIME_TYPES.SALESFORCE];\n\nexport type GongMimeType =\n  (typeof INTERNAL_MIME_TYPES.GONG)[keyof typeof INTERNAL_MIME_TYPES.GONG];\n\nexport type InternalToolInputMimeType =\n  (typeof INTERNAL_MIME_TYPES.TOOL_INPUT)[keyof typeof INTERNAL_MIME_TYPES.TOOL_INPUT];\n\nexport type IncludableInternalMimeType =\n  (typeof INCLUDABLE_INTERNAL_MIME_TYPES_VALUES)[number];\n\nexport type DustMimeType =\n  | BigQueryMimeType\n  | ConfluenceMimeType\n  | GithubMimeType\n  | GoogleDriveMimeType\n  | IntercomMimeType\n  | MicrosoftMimeType\n  | NotionMimeType\n  | SlackMimeType\n  | SnowflakeMimeType\n  | WebcrawlerMimeType\n  | ZendeskMimeType\n  | SalesforceMimeType\n  | GongMimeType\n  | DataSourceMimeType;\n\nexport function isDustMimeType(mimeType: string): mimeType is DustMimeType {\n  return (INTERNAL_MIME_TYPES_VALUES as string[]).includes(mimeType);\n}\n\nexport function isIncludableInternalMimeType(\n  mimeType: string\n): mimeType is IncludableInternalMimeType {\n  return (INCLUDABLE_INTERNAL_MIME_TYPES_VALUES as string[]).includes(mimeType);\n}\n","import type { AxiosRequestConfig } from \"axios\";\nimport axios from \"axios\";\nimport { createParser } from \"eventsource-parser\";\nimport http from \"http\";\nimport https from \"https\";\nimport { Readable } from \"stream\";\nimport { z } from \"zod\";\n\nimport type {\n  AgentActionSpecificEvent,\n  AgentActionSuccessEvent,\n  AgentConfigurationViewType,\n  AgentErrorEvent,\n  AgentMessagePublicType,\n  AgentMessageSuccessEvent,\n  APIError,\n  AppsCheckRequestType,\n  CancelMessageGenerationRequestType,\n  ConversationPublicType,\n  DataSourceViewType,\n  DustAPICredentials,\n  DustAppConfigType,\n  DustAppRunBlockExecutionEvent,\n  DustAppRunBlockStatusEvent,\n  DustAppRunErroredEvent,\n  DustAppRunFinalEvent,\n  DustAppRunFunctionCallArgumentsTokensEvent,\n  DustAppRunFunctionCallEvent,\n  DustAppRunRunStatusEvent,\n  DustAppRunTokensEvent,\n  FileUploadedRequestResponseType,\n  FileUploadUrlRequestType,\n  GenerationTokensEvent,\n  HeartbeatMCPResponseType,\n  LoggerInterface,\n  PatchDataSourceViewRequestType,\n  PostMCPResultsResponseType,\n  PublicPostContentFragmentRequestBody,\n  PublicPostConversationsRequestBody,\n  PublicPostMCPResultsRequestBody,\n  PublicPostMessageFeedbackRequestBody,\n  PublicPostMessagesRequestBody,\n  RegisterMCPResponseType,\n  SearchRequestBodyType,\n  UserMessageErrorEvent,\n  ValidateActionRequestBodyType,\n  ValidateActionResponseType,\n} from \"./types\";\nimport {\n  APIErrorSchema,\n  AppsCheckResponseSchema,\n  CancelMessageGenerationResponseSchema,\n  CreateConversationResponseSchema,\n  DataSourceViewResponseSchema,\n  DeleteFolderResponseSchema,\n  Err,\n  FileUploadRequestResponseSchema,\n  GetActiveMemberEmailsInWorkspaceResponseSchema,\n  GetAgentConfigurationsResponseSchema,\n  GetAppsResponseSchema,\n  GetConversationResponseSchema,\n  GetConversationsResponseSchema,\n  GetDataSourcesResponseSchema,\n  GetFeedbacksResponseSchema,\n  GetSpacesResponseSchema,\n  GetWorkspaceFeatureFlagsResponseSchema,\n  GetWorkspaceVerifiedDomainsResponseSchema,\n  HeartbeatMCPResponseSchema,\n  MeResponseSchema,\n  Ok,\n  PostContentFragmentResponseSchema,\n  PostMCPResultsResponseSchema,\n  PostMessageFeedbackResponseSchema,\n  PostUserMessageResponseSchema,\n  PostWorkspaceSearchResponseBodySchema,\n  RegisterMCPResponseSchema,\n  Result,\n  RunAppResponseSchema,\n  SearchDataSourceViewsResponseSchema,\n  TokenizeResponseSchema,\n  UpsertFolderResponseSchema,\n  ValidateActionResponseSchema,\n} from \"./types\";\n\nexport * from \"./internal_mime_types\";\nexport * from \"./types\";\n\ninterface DustResponse {\n  status: number;\n  ok: boolean;\n  url: string;\n  body: Readable | string;\n}\n\nconst textFromResponse = async (response: DustResponse): Promise<string> => {\n  if (typeof response.body === \"string\") {\n    return response.body;\n  }\n\n  const stream = response.body;\n\n  return new Promise((resolve, reject) => {\n    const chunks: Buffer[] = [];\n    stream.on(\"data\", (chunk) => chunks.push(Buffer.from(chunk)));\n    stream.on(\"end\", () => resolve(Buffer.concat(chunks).toString(\"utf-8\")));\n    stream.on(\"error\", reject);\n  });\n};\n\nconst axiosNoKeepAlive = axios.create({\n  httpAgent: new http.Agent({ keepAlive: false }),\n  httpsAgent: new https.Agent({ keepAlive: false }),\n});\n\nconst sanitizedError = (e: unknown) => {\n  if (axios.isAxiosError(e)) {\n    return {\n      ...e,\n      config: undefined,\n    };\n  }\n  return e;\n};\n\ntype RequestArgsType = {\n  method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n  path: string;\n  query?: URLSearchParams;\n  body?: Record<string, unknown>;\n  overrideWorkspaceId?: string;\n  signal?: AbortSignal;\n};\n\nexport class DustAPI {\n  _url: string;\n  _credentials: DustAPICredentials;\n  _logger: LoggerInterface;\n  _urlOverride: string | undefined | null;\n\n  /**\n   * @param credentials DustAPICrededentials\n   */\n  constructor(\n    config: {\n      url: string;\n    },\n    credentials: DustAPICredentials,\n    logger: LoggerInterface,\n    urlOverride?: string | undefined | null\n  ) {\n    this._url = config.url;\n    this._credentials = credentials;\n    this._logger = logger;\n    this._urlOverride = urlOverride;\n  }\n\n  workspaceId(): string {\n    return this._credentials.workspaceId;\n  }\n\n  setWorkspaceId(workspaceId: string) {\n    this._credentials.workspaceId = workspaceId;\n  }\n\n  apiUrl(): string {\n    return this._urlOverride ? this._urlOverride : this._url;\n  }\n\n  async getApiKey(): Promise<string | null> {\n    if (typeof this._credentials.apiKey === \"function\") {\n      return this._credentials.apiKey();\n    }\n    return this._credentials.apiKey;\n  }\n\n  async baseHeaders() {\n    const headers: RequestInit[\"headers\"] = {\n      Authorization: `Bearer ${await this.getApiKey()}`,\n    };\n    if (this._credentials.extraHeaders) {\n      Object.assign(headers, this._credentials.extraHeaders);\n    }\n    return headers;\n  }\n\n  /**\n   * Fetches the current user's information from the API.\n   *\n   * This method sends a GET request to the `/api/v1/me` endpoint with the necessary authorization\n   * headers. It then processes the response to extract the user information.  Note that this will\n   * only work if you are using an OAuth2 token. It will always fail with a workspace API key.\n   *\n   * @returns {Promise<Result<User, Error>>} A promise that resolves to a Result object containing\n   * either the user information or an error.\n   */\n  async me() {\n    // This method call directly _fetchWithError and _resultFromResponse as it's a little special:\n    // it doesn't live under the workspace resource.\n    const headers: RequestInit[\"headers\"] = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${await this.getApiKey()}`,\n    };\n\n    const res = await this._fetchWithError(`${this.apiUrl()}/api/v1/me`, {\n      method: \"GET\",\n      headers,\n    });\n\n    const r = await this._resultFromResponse(MeResponseSchema, res);\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.user);\n  }\n\n  async request(args: RequestArgsType) {\n    // Conveniently clean path from any leading \"/\" just in case\n    args.path = args.path.replace(/^\\/+/, \"\");\n\n    let url = `${this.apiUrl()}/api/v1/w/${\n      args.overrideWorkspaceId ?? this.workspaceId()\n    }/${args.path}`;\n\n    if (args.query) {\n      url += `?${args.query.toString()}`;\n    }\n\n    const headers = await this.baseHeaders();\n    headers[\"Content-Type\"] = \"application/json\";\n\n    const res = await this._fetchWithError(url, {\n      method: args.method,\n      headers,\n      data: args.body ? JSON.stringify(args.body) : undefined,\n      signal: args.signal,\n    });\n\n    return res;\n  }\n\n  /**\n   * This functions talks directly to the Dust production API to create a run.\n   *\n   * @param app DustAppType the app to run streamed\n   * @param config DustAppConfigType the app config\n   * @param inputs any[] the app inputs\n   */\n  async runApp(\n    {\n      workspaceId,\n      appId,\n      appHash,\n      appSpaceId,\n    }: {\n      workspaceId: string;\n      appId: string;\n      appSpaceId: string;\n      appHash: string;\n    },\n    config: DustAppConfigType,\n    inputs: unknown[],\n    { useWorkspaceCredentials }: { useWorkspaceCredentials: boolean } = {\n      useWorkspaceCredentials: false,\n    }\n  ) {\n    const res = await this.request({\n      overrideWorkspaceId: workspaceId,\n      path: `spaces/${appSpaceId}/apps/${appId}/runs`,\n      query: new URLSearchParams({\n        use_workspace_credentials: useWorkspaceCredentials ? \"true\" : \"false\",\n      }),\n      method: \"POST\",\n      body: {\n        specification_hash: appHash,\n        config,\n        stream: false,\n        blocking: true,\n        inputs,\n      },\n    });\n\n    const r = await this._resultFromResponse(RunAppResponseSchema, res);\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.run);\n  }\n\n  /**\n   * This functions talks directly to the Dust production API to create a streamed run.\n   *\n   * @param app DustAppType the app to run streamed\n   * @param config DustAppConfigType the app config\n   * @param inputs any[] the app inputs\n   */\n  async runAppStreamed(\n    {\n      workspaceId,\n      appId,\n      appHash,\n      appSpaceId,\n    }: {\n      workspaceId: string;\n      appId: string;\n      appSpaceId: string;\n      appHash: string;\n    },\n    config: DustAppConfigType,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    inputs: any[],\n    { useWorkspaceCredentials }: { useWorkspaceCredentials: boolean } = {\n      useWorkspaceCredentials: false,\n    }\n  ) {\n    const res = await this.request({\n      overrideWorkspaceId: workspaceId,\n      path: `spaces/${appSpaceId}/apps/${appId}/runs`,\n      query: new URLSearchParams({\n        use_workspace_credentials: useWorkspaceCredentials ? \"true\" : \"false\",\n      }),\n      method: \"POST\",\n      body: {\n        specification_hash: appHash,\n        config,\n        stream: true,\n        blocking: false,\n        inputs,\n      },\n    });\n\n    if (res.isErr()) {\n      return res;\n    }\n\n    /**\n     * This help functions process a streamed response in the format of the Dust API for running\n     * streamed apps.\n     *\n     * @param res an HTTP response ready to be consumed as a stream\n     */\n    async function processStreamedRunResponse(\n      res: DustResponse,\n      logger: LoggerInterface\n    ) {\n      if (!res.ok || !res.body) {\n        return new Err({\n          type: \"dust_api_error\",\n          message: `Error running streamed app: status_code=${res.status}`,\n        });\n      }\n\n      let hasRunId = false;\n      let rejectDustRunIdPromise: (err: Error) => void;\n      let resolveDustRunIdPromise: (runId: string) => void;\n      const dustRunIdPromise = new Promise<string>((resolve, reject) => {\n        rejectDustRunIdPromise = reject;\n        resolveDustRunIdPromise = resolve;\n      });\n\n      let pendingEvents: (\n        | DustAppRunErroredEvent\n        | DustAppRunRunStatusEvent\n        | DustAppRunBlockStatusEvent\n        | DustAppRunBlockExecutionEvent\n        | DustAppRunTokensEvent\n        | DustAppRunFunctionCallEvent\n        | DustAppRunFunctionCallArgumentsTokensEvent\n        | DustAppRunFinalEvent\n      )[] = [];\n\n      const parser = createParser((event) => {\n        if (event.type === \"event\") {\n          if (event.data) {\n            try {\n              const data = JSON.parse(event.data);\n\n              switch (data.type) {\n                case \"error\": {\n                  pendingEvents.push({\n                    type: \"error\",\n                    content: {\n                      code: data.content.code,\n                      message: data.content.message,\n                    },\n                  } as DustAppRunErroredEvent);\n                  break;\n                }\n                case \"run_status\": {\n                  pendingEvents.push({\n                    type: data.type,\n                    content: data.content,\n                  });\n                  break;\n                }\n                case \"block_status\": {\n                  pendingEvents.push({\n                    type: data.type,\n                    content: data.content,\n                  });\n                  break;\n                }\n                case \"block_execution\": {\n                  pendingEvents.push({\n                    type: data.type,\n                    content: data.content,\n                  });\n                  break;\n                }\n                case \"tokens\": {\n                  pendingEvents.push({\n                    type: \"tokens\",\n                    content: data.content,\n                  } as DustAppRunTokensEvent);\n                  break;\n                }\n                case \"function_call\": {\n                  pendingEvents.push({\n                    type: \"function_call\",\n                    content: data.content,\n                  } as DustAppRunFunctionCallEvent);\n                  break;\n                }\n                case \"function_call_arguments_tokens\": {\n                  pendingEvents.push({\n                    type: \"function_call_arguments_tokens\",\n                    content: data.content,\n                  } as DustAppRunFunctionCallArgumentsTokensEvent);\n                  break;\n                }\n                case \"final\": {\n                  pendingEvents.push({\n                    type: \"final\",\n                  } as DustAppRunFinalEvent);\n                }\n              }\n              if (data.content?.run_id && !hasRunId) {\n                hasRunId = true;\n                resolveDustRunIdPromise(data.content.run_id);\n              }\n            } catch (err) {\n              logger.error(\n                { error: err },\n                \"Failed parsing chunk from Dust API\"\n              );\n            }\n          }\n        }\n      });\n\n      const reader = res.body;\n\n      const streamEvents = async function* () {\n        try {\n          for await (const chunk of reader) {\n            parser.feed(new TextDecoder().decode(chunk));\n            for (const event of pendingEvents) {\n              yield event;\n            }\n            pendingEvents = [];\n          }\n          // while (true) {\n          //   const { done, value } = await reader.read();\n          //   if (done) {\n          //     break;\n          //   }\n          //   parser.feed(new TextDecoder().decode(value));\n          //   for (const event of pendingEvents) {\n          //     yield event;\n          //   }\n          //   pendingEvents = [];\n          // }\n          if (!hasRunId) {\n            // Once the stream is entirely consumed, if we haven't received a run id, reject the\n            // promise.\n            setImmediate(() => {\n              logger.error({}, \"No run id received.\");\n              rejectDustRunIdPromise(new Error(\"No run id received\"));\n            });\n          }\n        } catch (e) {\n          logger.error(\n            {\n              error: e,\n              errorStr: JSON.stringify(e),\n              errorSource: \"processStreamedRunResponse\",\n            },\n            \"DustAPI error: streaming chunks\"\n          );\n          yield {\n            type: \"error\",\n            content: {\n              code: \"stream_error\",\n              message: \"Error streaming chunks\",\n            },\n          } as DustAppRunErroredEvent;\n        }\n      };\n\n      return new Ok({\n        eventStream: streamEvents(),\n        dustRunId: dustRunIdPromise,\n      });\n    }\n\n    return processStreamedRunResponse(res.value.response, this._logger);\n  }\n\n  /**\n   * This actions talks to the Dust production API to retrieve the list of data sources of the\n   * current workspace.\n   */\n  async getDataSources() {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"data_sources\",\n    });\n\n    const r = await this._resultFromResponse(GetDataSourcesResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.data_sources);\n  }\n\n  async getAgentConfigurations({\n    view,\n    includes = [],\n  }: {\n    view?: AgentConfigurationViewType;\n    includes?: \"authors\"[];\n  }) {\n    // Function to generate query parameters.\n    function getQueryString() {\n      const params = new URLSearchParams();\n      if (typeof view === \"string\") {\n        params.append(\"view\", view);\n      }\n      if (includes.includes(\"authors\")) {\n        params.append(\"withAuthors\", \"true\");\n      }\n\n      return params.toString();\n    }\n\n    const queryString = view || includes.length > 0 ? getQueryString() : null;\n    const path = queryString\n      ? `assistant/agent_configurations?${queryString}`\n      : \"assistant/agent_configurations\";\n\n    const res = await this.request({\n      path,\n      method: \"GET\",\n    });\n\n    const r = await this._resultFromResponse(\n      GetAgentConfigurationsResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.agentConfigurations);\n  }\n\n  async postContentFragment({\n    conversationId,\n    contentFragment,\n  }: {\n    conversationId: string;\n    contentFragment: PublicPostContentFragmentRequestBody;\n  }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `assistant/conversations/${conversationId}/content_fragments`,\n      body: { ...contentFragment },\n    });\n\n    const r = await this._resultFromResponse(\n      PostContentFragmentResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.contentFragment);\n  }\n\n  // When creating a conversation with a user message, the API returns only after the user message\n  // was created (and if applicable the associated agent messages).\n  async createConversation({\n    title,\n    visibility,\n    message,\n    contentFragment,\n    contentFragments,\n    blocking = false,\n  }: PublicPostConversationsRequestBody) {\n    const res = await this.request({\n      method: \"POST\",\n      path: \"assistant/conversations\",\n      body: {\n        title,\n        visibility,\n        message,\n        contentFragment,\n        contentFragments,\n        blocking,\n      },\n    });\n\n    return this._resultFromResponse(CreateConversationResponseSchema, res);\n  }\n\n  async postUserMessage({\n    conversationId,\n    message,\n  }: {\n    conversationId: string;\n    message: PublicPostMessagesRequestBody;\n  }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `assistant/conversations/${conversationId}/messages`,\n      body: { ...message },\n    });\n\n    const r = await this._resultFromResponse(\n      PostUserMessageResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.message);\n  }\n\n  async streamAgentAnswerEvents({\n    conversation,\n    userMessageId,\n    signal,\n  }: {\n    conversation: ConversationPublicType;\n    userMessageId: string;\n    signal?: AbortSignal;\n  }) {\n    // find the agent message with the parentMessageId equal to the user message id\n    const agentMessages = conversation.content\n      .map((versions) => {\n        const m = versions[versions.length - 1];\n        return m;\n      })\n      .filter((m): m is AgentMessagePublicType => {\n        return (\n          m && m.type === \"agent_message\" && m.parentMessageId === userMessageId\n        );\n      });\n    if (agentMessages.length === 0) {\n      return new Err(new Error(\"Failed to retrieve agent message\"));\n    }\n\n    const agentMessage = agentMessages[0];\n    return this.streamAgentMessageEvents({\n      conversation,\n      agentMessage,\n      signal,\n    });\n  }\n\n  async streamAgentMessageEvents({\n    conversation,\n    agentMessage,\n    signal,\n  }: {\n    conversation: ConversationPublicType;\n    agentMessage: AgentMessagePublicType;\n    signal?: AbortSignal;\n  }) {\n    const res = await this.request({\n      method: \"GET\",\n      path: `assistant/conversations/${conversation.sId}/messages/${agentMessage.sId}/events`,\n      signal,\n    });\n\n    if (res.isErr()) {\n      return res;\n    }\n\n    if (!res.value.response.ok || !res.value.response.body) {\n      return new Err({\n        type: \"dust_api_error\",\n        message: `Error running streamed app: status_code=${\n          res.value.response.status\n        }  - message=${await textFromResponse(res.value.response)}`,\n      });\n    }\n\n    let pendingEvents: (\n      | UserMessageErrorEvent\n      | AgentErrorEvent\n      | AgentActionSuccessEvent\n      | GenerationTokensEvent\n      | AgentMessageSuccessEvent\n      | AgentActionSpecificEvent\n    )[] = [];\n\n    const parser = createParser((event) => {\n      if (event.type === \"event\") {\n        if (event.data) {\n          try {\n            const data = JSON.parse(event.data).data;\n            // TODO: shall we use the schema to validate the data?\n            switch (data.type) {\n              case \"user_message_error\": {\n                pendingEvents.push(data as UserMessageErrorEvent);\n                break;\n              }\n              case \"agent_error\": {\n                pendingEvents.push(data as AgentErrorEvent);\n                break;\n              }\n              case \"agent_action_success\": {\n                pendingEvents.push(data as AgentActionSuccessEvent);\n                break;\n              }\n              case \"generation_tokens\": {\n                pendingEvents.push(data as GenerationTokensEvent);\n                break;\n              }\n              case \"agent_message_success\": {\n                pendingEvents.push(data as AgentMessageSuccessEvent);\n                break;\n              }\n              case \"browse_params\":\n              case \"dust_app_run_block\":\n              case \"dust_app_run_params\":\n              case \"process_params\":\n              case \"retrieval_params\":\n              case \"search_labels_params\":\n              case \"tables_query_output\":\n              case \"tables_query_params\":\n              case \"websearch_params\":\n                pendingEvents.push(data as AgentActionSpecificEvent);\n                break;\n            }\n          } catch (err) {\n            this._logger.error(\n              { error: err },\n              \"Failed parsing chunk from Dust API\"\n            );\n          }\n        }\n      }\n    });\n\n    const reader = res.value.response.body;\n    const logger = this._logger;\n\n    const streamEvents = async function* () {\n      try {\n        for await (const chunk of reader) {\n          parser.feed(new TextDecoder().decode(chunk));\n          for (const event of pendingEvents) {\n            yield event;\n          }\n          pendingEvents = [];\n        }\n      } catch (e) {\n        logger.error(\n          {\n            error: e,\n            errorStr: JSON.stringify(e),\n            errorSource: \"streamAgentAnswerEvents\",\n          },\n          \"DustAPI error: streaming chunks\"\n        );\n        yield {\n          type: \"error\",\n          content: {\n            code: \"stream_error\",\n            message: \"Error streaming chunks\",\n          },\n        } as DustAppRunErroredEvent;\n      }\n    };\n\n    return new Ok({ eventStream: streamEvents() });\n  }\n\n  async cancelMessageGeneration({\n    conversationId,\n    messageIds,\n  }: {\n    conversationId: string;\n    messageIds: string[];\n  }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `assistant/conversations/${conversationId}/cancel`,\n      body: {\n        messageIds,\n      } as CancelMessageGenerationRequestType,\n    });\n\n    const r = await this._resultFromResponse(\n      CancelMessageGenerationResponseSchema,\n      res\n    );\n\n    if (r.isErr()) {\n      return r;\n    } else {\n      return new Ok(r.value);\n    }\n  }\n\n  async getConversations() {\n    const res = await this.request({\n      method: \"GET\",\n      path: `assistant/conversations`,\n    });\n\n    const r = await this._resultFromResponse(\n      GetConversationsResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.conversations);\n  }\n\n  async getConversation({ conversationId }: { conversationId: string }) {\n    const res = await this.request({\n      method: \"GET\",\n      path: `assistant/conversations/${conversationId}`,\n    });\n\n    const r = await this._resultFromResponse(\n      GetConversationResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.conversation);\n  }\n\n  async getConversationFeedback({\n    conversationId,\n  }: {\n    conversationId: string;\n  }) {\n    const res = await this.request({\n      method: \"GET\",\n      path: `assistant/conversations/${conversationId}/feedbacks`,\n    });\n\n    const r = await this._resultFromResponse(GetFeedbacksResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.feedbacks);\n  }\n\n  async postFeedback(\n    conversationId: string,\n    messageId: string,\n    feedback: PublicPostMessageFeedbackRequestBody\n  ) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `assistant/conversations/${conversationId}/messages/${messageId}/feedbacks`,\n      body: feedback,\n    });\n\n    return this._resultFromResponse(PostMessageFeedbackResponseSchema, res);\n  }\n\n  async deleteFeedback(conversationId: string, messageId: string) {\n    const res = await this.request({\n      method: \"DELETE\",\n      path: `assistant/conversations/${conversationId}/messages/${messageId}/feedbacks`,\n    });\n\n    return this._resultFromResponse(PostMessageFeedbackResponseSchema, res);\n  }\n\n  async tokenize(text: string, dataSourceId: string) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `data_sources/${dataSourceId}/tokenize`,\n      body: { text },\n    });\n\n    const r = await this._resultFromResponse(TokenizeResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.tokens);\n  }\n\n  async upsertFolder({\n    dataSourceId,\n    folderId,\n    timestamp,\n    title,\n    parentId,\n    parents,\n    mimeType,\n    sourceUrl,\n    providerVisibility,\n  }: {\n    dataSourceId: string;\n    folderId: string;\n    timestamp: number;\n    title: string;\n    parentId: string | null;\n    parents: string[];\n    mimeType: string;\n    sourceUrl: string | null;\n    providerVisibility: \"public\" | \"private\" | null;\n  }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `data_sources/${dataSourceId}/folders/${encodeURIComponent(\n        folderId\n      )}`,\n      body: {\n        timestamp: Math.floor(timestamp),\n        title,\n        parent_id: parentId,\n        parents,\n        mime_type: mimeType,\n        source_url: sourceUrl,\n        provider_visibility: providerVisibility,\n      },\n    });\n\n    const r = await this._resultFromResponse(UpsertFolderResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value);\n  }\n\n  async deleteFolder({\n    dataSourceId,\n    folderId,\n  }: {\n    dataSourceId: string;\n    folderId: string;\n  }) {\n    const res = await this.request({\n      method: \"DELETE\",\n      path: `data_sources/${dataSourceId}/folders/${encodeURIComponent(\n        folderId\n      )}`,\n    });\n\n    const r = await this._resultFromResponse(DeleteFolderResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value);\n  }\n\n  async uploadFile({\n    contentType,\n    fileName,\n    fileSize,\n    useCase,\n    useCaseMetadata,\n    fileObject,\n  }: FileUploadUrlRequestType & { fileObject: File }) {\n    const res = await this.request({\n      method: \"POST\",\n      path: \"files\",\n      body: {\n        contentType,\n        fileName,\n        fileSize,\n        useCase,\n        useCaseMetadata,\n      },\n    });\n\n    const fileRes = await this._resultFromResponse(\n      FileUploadRequestResponseSchema,\n      res\n    );\n\n    if (fileRes.isErr()) {\n      return fileRes;\n    }\n\n    const { file } = fileRes.value;\n\n    const formData = new FormData();\n    formData.append(\"file\", fileObject);\n\n    // Upload file to the obtained URL.\n    try {\n      const {\n        data: { file: fileUploaded },\n      } = await axiosNoKeepAlive.post<FileUploadedRequestResponseType>(\n        file.uploadUrl,\n        formData,\n        { headers: await this.baseHeaders() }\n      );\n      return new Ok(fileUploaded);\n    } catch (err) {\n      if (axios.isAxiosError(err)) {\n        return new Err(\n          new Error(\n            err.response?.data?.error?.message || \"Failed to upload file\"\n          )\n        );\n      }\n      return new Err(\n        new Error(err instanceof Error ? err.message : \"Unknown error\")\n      );\n    }\n  }\n\n  async deleteFile({ fileID }: { fileID: string }) {\n    const res = await this.request({\n      method: \"DELETE\",\n      path: `files/${fileID}`,\n    });\n\n    return res;\n  }\n\n  async getActiveMemberEmailsInWorkspace() {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"members/emails\",\n      query: new URLSearchParams({ activeOnly: \"true\" }),\n    });\n\n    const r = await this._resultFromResponse(\n      GetActiveMemberEmailsInWorkspaceResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value.emails);\n  }\n\n  async getWorkspaceVerifiedDomains() {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"verified_domains\",\n    });\n\n    const r = await this._resultFromResponse(\n      GetWorkspaceVerifiedDomainsResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value.verified_domains);\n  }\n\n  async getWorkspaceFeatureFlags() {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"feature_flags\",\n    });\n\n    const r = await this._resultFromResponse(\n      GetWorkspaceFeatureFlagsResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value.feature_flags);\n  }\n\n  async searchDataSourceViews(searchParams: URLSearchParams) {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"data_source_views/search\",\n      query: searchParams,\n    });\n\n    const r = await this._resultFromResponse(\n      SearchDataSourceViewsResponseSchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value.data_source_views);\n  }\n\n  async patchDataSourceView(\n    dataSourceView: DataSourceViewType,\n    patch: PatchDataSourceViewRequestType\n  ) {\n    const res = await this.request({\n      method: \"PATCH\",\n      path: `spaces/${dataSourceView.spaceId}/data_source_views/${dataSourceView.sId}`,\n      body: patch,\n    });\n\n    const r = await this._resultFromResponse(DataSourceViewResponseSchema, res);\n    if (r.isErr()) {\n      return r;\n    }\n\n    return new Ok(r.value.dataSourceView);\n  }\n\n  async exportApps({ appSpaceId }: { appSpaceId: string }) {\n    const res = await this.request({\n      method: \"GET\",\n      path: `spaces/${appSpaceId}/apps/export`,\n    });\n\n    const r = await this._resultFromResponse(GetAppsResponseSchema, res);\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.apps);\n  }\n\n  async checkApps(apps: AppsCheckRequestType, appSpaceId: string) {\n    const res = await this.request({\n      method: \"POST\",\n      path: `spaces/${appSpaceId}/apps/check`,\n      body: apps,\n    });\n\n    const r = await this._resultFromResponse(AppsCheckResponseSchema, res);\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.apps);\n  }\n\n  async getSpaces() {\n    const res = await this.request({\n      method: \"GET\",\n      path: \"spaces\",\n    });\n\n    const r = await this._resultFromResponse(GetSpacesResponseSchema, res);\n\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.spaces);\n  }\n\n  async searchNodes(searchParams: SearchRequestBodyType) {\n    const res = await this.request({\n      method: \"POST\",\n      path: \"search\",\n      body: searchParams,\n    });\n\n    const r = await this._resultFromResponse(\n      PostWorkspaceSearchResponseBodySchema,\n      res\n    );\n    if (r.isErr()) {\n      return r;\n    }\n    return new Ok(r.value.nodes);\n  }\n\n  private async _fetchWithError(\n    url: string,\n    config?: AxiosRequestConfig\n  ): Promise<Result<{ response: DustResponse; duration: number }, APIError>> {\n    const now = Date.now();\n    try {\n      const res = await axiosNoKeepAlive<Readable | string>(url, {\n        validateStatus: () => true,\n        responseType: \"stream\",\n        ...config,\n      });\n      const response: DustResponse = {\n        status: res.status,\n        url: res.config.url || url,\n        body: res.data,\n        ok: res.status >= 200 && res.status < 300,\n      };\n      return new Ok({ response, duration: Date.now() - now });\n    } catch (e) {\n      const duration = Date.now() - now;\n      const err: APIError = {\n        type: \"unexpected_network_error\",\n        message: `Unexpected network error from DustAPI: ${e}`,\n      };\n      this._logger.error(\n        {\n          dustError: err,\n          url,\n          duration,\n          connectorsError: err,\n          error: sanitizedError(e),\n        },\n        \"DustAPI error\"\n      );\n      return new Err(err);\n    }\n  }\n\n  // MCP Related.\n\n  async validateAction({\n    conversationId,\n    messageId,\n    actionId,\n    approved,\n  }: ValidateActionRequestBodyType & {\n    conversationId: string;\n    messageId: string;\n  }): Promise<Result<ValidateActionResponseType, APIError>> {\n    const res = await this.request({\n      method: \"POST\",\n      path: `assistant/conversations/${conversationId}/messages/${messageId}/validate-action`,\n      body: {\n        actionId,\n        approved,\n      },\n    });\n\n    return this._resultFromResponse(ValidateActionResponseSchema, res);\n  }\n\n  async registerMCPServer({\n    serverId,\n  }: {\n    serverId: string;\n  }): Promise<Result<RegisterMCPResponseType, APIError>> {\n    const res = await this.request({\n      method: \"POST\",\n      path: \"mcp/register\",\n      body: {\n        serverId,\n      },\n    });\n\n    return this._resultFromResponse(RegisterMCPResponseSchema, res);\n  }\n\n  async heartbeatMCPServer({\n    serverId,\n  }: {\n    serverId: string;\n  }): Promise<Result<HeartbeatMCPResponseType, APIError>> {\n    const res = await this.request({\n      method: \"POST\",\n      path: \"mcp/heartbeat\",\n      body: {\n        serverId,\n      },\n    });\n\n    return this._resultFromResponse(HeartbeatMCPResponseSchema, res);\n  }\n\n  async postMCPResults({\n    requestId,\n    result,\n    serverId,\n  }: PublicPostMCPResultsRequestBody & { serverId: string }): Promise<\n    Result<PostMCPResultsResponseType, APIError>\n  > {\n    const params = new URLSearchParams();\n    params.set(\"serverId\", serverId);\n\n    const res = await this.request({\n      method: \"POST\",\n      path: `mcp/results?${params.toString()}`,\n      body: {\n        requestId,\n        result,\n      },\n    });\n\n    return this._resultFromResponse(PostMCPResultsResponseSchema, res);\n  }\n\n  async getMCPRequestsConnectionDetails({\n    serverId,\n    lastEventId,\n  }: {\n    serverId: string;\n    lastEventId?: string | null;\n  }): Promise<\n    Result<{ url: string; headers: Record<string, string> }, APIError>\n  > {\n    const url = `${this.apiUrl()}/api/v1/w/${this.workspaceId()}/mcp/requests`;\n    const params = new URLSearchParams({\n      serverId,\n      ...(lastEventId ? { lastEventId } : {}),\n    });\n\n    const headers = await this.baseHeaders();\n\n    return new Ok({\n      url: `${url}?${params.toString()}`,\n      headers,\n    });\n  }\n\n  private async _resultFromResponse<T extends z.ZodTypeAny>(\n    schema: T,\n    res: Result<\n      {\n        response: DustResponse;\n        duration: number;\n      },\n      APIError\n    >\n  ): Promise<Result<z.infer<T>, APIError>> {\n    if (res.isErr()) {\n      return res;\n    }\n\n    if (res.value.response.status === 413) {\n      const err: APIError = {\n        type: \"content_too_large\",\n        message:\n          \"Your request content is too large, please try again with a shorter content.\",\n      };\n      this._logger.error(\n        {\n          dustError: err,\n          status: res.value.response.status,\n          url: res.value.response.url,\n          duration: res.value.duration,\n        },\n        \"DustAPI error\"\n      );\n      return new Err(err);\n    }\n\n    // We get the text and attempt to parse so that we can log the raw text in case of error (the\n    // body is already consumed by response.json() if used otherwise).\n    const text = await textFromResponse(res.value.response);\n\n    try {\n      const response = JSON.parse(text);\n      const r = schema.safeParse(response);\n      // This assume that safe parsing means a 200 status.\n      if (r.success) {\n        return new Ok(r.data as z.infer<T>);\n      } else {\n        // We couldn't parse the response directly, maybe it's an error\n        const rErr = APIErrorSchema.safeParse(response[\"error\"]);\n        if (rErr.success) {\n          // Successfully parsed an error\n          this._logger.error(\n            {\n              dustError: rErr.data,\n              status: res.value.response.status,\n              url: res.value.response.url,\n              duration: res.value.duration,\n            },\n            \"DustAPI error\"\n          );\n          return new Err(rErr.data);\n        } else {\n          // Unexpected response format (neither an error nor a valid response)\n          const err: APIError = {\n            type: \"unexpected_response_format\",\n            message:\n              `Unexpected response format from DustAPI calling ` +\n              `${res.value.response.url} : ${r.error.message}`,\n          };\n          this._logger.error(\n            {\n              dustError: err,\n              parseError: r.error.message,\n              rawText: text,\n              status: res.value.response.status,\n              url: res.value.response.url,\n              duration: res.value.duration,\n            },\n            \"DustAPI error\"\n          );\n          return new Err(err);\n        }\n      }\n    } catch (e) {\n      const err: APIError = {\n        type: \"unexpected_response_format\",\n        message:\n          `Fail to parse response from DustAPI calling ` +\n          `${res.value.response.url} : ${e}`,\n      };\n      this._logger.error(\n        {\n          dustError: err,\n          error: e,\n          rawText: text,\n          status: res.value.response.status,\n          url: res.value.response.url,\n          duration: res.value.duration,\n        },\n        \"DustAPI error\"\n      );\n      return new Err(err);\n    }\n  }\n}\n"],"names":["FlexibleEnumSchema","z","custom","val","ModelProviderIdSchema","ModelLLMIdSchema","EmbeddingProviderIdSchema","ConnectorsAPIErrorSchema","object","type","message","string","ModelIdSchema","number","supportedOtherFileFormats","supportedImageFileFormats","supportedOtherContentTypes","Object","keys","supportedImageContentTypes","supportedFileExtensions","concat","supportedUploadableContentType","SupportedContentFragmentTypeSchema","SupportedFileContentFragmentTypeSchema","UserMessageOriginSchema","or","undefined","VisibilitySchema","Ok","value","this","_proto","prototype","isOk","isErr","Err","error","_proto2","Timezone","refine","s","moment","tz","names","includes","ConnectorProvidersSchema","EditedByUserSchema","editedAt","nullable","fullName","imageUrl","email","userId","DataSourceTypeSchema","id","sId","createdAt","name","description","assistantDefaultSelected","dustAPIProjectId","dustAPIDataSourceId","connectorId","connectorProvider","editedByUser","optional","DataSourceViewCategoriesSchema","BlockTypeSchema","StatusSchema","BlockRunConfigSchema","record","any","BlockStatusSchema","block_type","status","success_count","error_count","RunConfigSchema","blocks","TraceTypeSchema","unknown","meta","RunStatusSchema","run","array","RunTypeSchema","run_id","created","run_type","app_hash","specification_hash","config","traces","tuple","results","TokensClassificationSchema","GenerationTokensEventSchema","literal","configurationId","messageId","text","classification","union","delimiterClassification","BaseActionSchema","BrowseActionOutputSchema","requestedUrl","browsedUrl","content","responseCode","errorMessage","BrowseActionTypeSchema","extend","agentMessageId","urls","output","functionCallId","functionCallName","step","SearchLabelsActionTypeSchema","tags","tag","match_count","data_sources","ReasoningActionTypeSchema","thinking","ConversationIncludeFileActionTypeSchema","params","fileId","tokensCount","fileTitle","ConversationListFilesActionTypeSchema","files","contentFragmentId","nodeDataSourceViewId","title","contentType","DustAppParametersSchema","DustAppRunActionTypeSchema","appWorkspaceId","appId","appName","runningBlock","transform","o","_extends","DataSourceViewKindSchema","DataSourceViewSchema","category","dataSource","kind","parentsIn","updatedAt","spaceId","TimeframeUnitSchema","TimeFrameSchema","duration","unit","RetrievalDocumentTypeSchema","chunks","offset","score","documentId","dataSourceView","reference","sourceUrl","timestamp","RetrievalActionTypeSchema","relativeTimeFrame","query","topK","documents","ProcessSchemaPropertySchema","ProcessActionOutputsSchema","data","min_timestamp","total_documents","total_chunks","total_tokens","ProcessActionTypeSchema","jsonSchema","outputs","TablesQueryActionTypeSchema","resultsFileId","resultsFileSnippet","sectionFileId","WhitelistableFeaturesSchema","WorkspaceSegmentationSchema","RoleSchema","WorkspaceSchema","role","segmentation","whiteListedProviders","defaultEmbeddingProvider","ssoEnforced","ExtensionWorkspaceSchema","blacklistedDomains","UserProviderSchema","UserSchema","provider","username","firstName","lastName","image","WebsearchResultSchema","snippet","link","WebsearchActionOutputSchema","WebsearchActionTypeSchema","MCPActionTypeSchema","GlobalAgentStatusSchema","AgentConfigurationStatusSchema","AgentConfigurationScopeSchema","AgentConfigurationViewSchema","AgentUsageTypeSchema","messageCount","conversationCount","userCount","timePeriodSec","AgentRecentAuthorsSchema","readonly","AgentModelConfigurationSchema","providerId","modelId","temperature","LightAgentConfigurationSchema","versionCreatedAt","version","versionAuthorId","instructions","model","scope","userFavorite","pictureUrl","lastAuthors","usage","maxStepsPerRun","visualizationEnabled","templateId","groupIds","requestedGroupIds","ContentFragmentContextSchema","profilePictureUrl","ContentNodeTypeSchema","ContentNodesViewTypeSchema","ContentFragmentNodeData","nodeId","nodeType","spaceName","ContentFragmentSchema","visibility","textUrl","textBytes","context","contentFragmentVersion","contentNodeData","AgentMentionSchema","UserMessageContextSchema","timezone","origin","clientSideMCPServerIds","UserMessageSchema","user","mentions","AgentActionTypeSchema","AgentMessageStatusSchema","AgentMessageTypeSchema","parentMessageId","configuration","actions","chainOfThought","rawContents","code","AgentMesssageFeedbackSchema","thumbDirection","agentConfigurationId","agentConfigurationVersion","isConversationShared","ConversationVisibilitySchema","ConversationWithoutContentSchema","updated","owner","ConversationSchema","CoreAPIErrorSchema","CoreAPITokenTypeSchema","APIErrorSchema","data_source_error","run_error","app_error","connectors_error","WorkspaceDomainSchema","domain","domainAutoJoinEnabled","DustAppTypeSchema","appHash","workspaceId","DustAppConfigTypeSchema","DustAppRunErroredEventSchema","DustAppRunRunStatusEventSchema","DustAppRunBlockStatusEventSchema","DustAppRunBlockExecutionEventSchema","block_name","execution","DustAppRunFinalEventSchema","DustAppRunTokensEventSchema","input_index","map","iteration","tokens","logprobs","DustAppRunFunctionCallEventSchema","function_call","DustAppRunFunctionCallArgumentsTokensEventSchema","SpaceKindSchema","SpaceTypeSchema","isRestricted","DatasetSchemaEntryType","DatasetSchema","schema","key","AppTypeSchema","savedSpecification","savedConfig","savedRun","space","datasets","coreSpecifications","AppImportTypeSchema","RunAppResponseSchema","GetDataSourcesResponseSchema","GetOrPatchAgentConfigurationResponseSchema","agentConfiguration","PatchAgentConfigurationRequestSchema","GetAgentConfigurationsResponseSchema","agentConfigurations","PostContentFragmentResponseSchema","contentFragment","CreateConversationResponseSchema","conversation","GetFeedbacksResponseSchema","feedbacks","PublicPostMessageFeedbackRequestBodySchema","feedbackContent","PostMessageFeedbackResponseSchema","success","PostUserMessageResponseSchema","GetConversationResponseSchema","TokenizeResponseSchema","GetActiveMemberEmailsInWorkspaceResponseSchema","emails","GetWorkspaceVerifiedDomainsResponseSchema","verified_domains","GetWorkspaceFeatureFlagsResponseSchema","feature_flags","PublicPostMessagesRequestBodySchema","intersection","min","blocking","partial","PublicPostEditMessagesRequestBodySchema","PublicContentFragmentWithContentSchema","url","supersededContentFragmentId","PublicContentFragmentWithFileIdSchema","PublicContentFragmentWithContentNodeSchema","PublicPostContentFragmentRequestBodySchema","PublicPostConversationsRequestBodySchema","contentFragments","PostConversationsResponseSchema","GetConversationsResponseSchema","conversations","SearchDataSourceViewsRequestSchema","dataSourceId","vaultId","vaultKind","SearchDataSourceViewsResponseSchema","data_source_views","ValidateMemberRequestSchema","GetAppsResponseSchema","apps","PostAppsRequestSchema","ImportAppsResponseSchema","DataSourceViewResponseSchema","PatchDataSourceViewRequestSchema","parentsToAdd","parentsToRemove","DataSourceSearchQuerySchema","top_k","coerce","full_text","target_document_tokens","timestamp_gt","timestamp_lt","tags_in","tags_not","parents_in","parents_not","FrontDataSourceDocumentSectionSchema","lazy","prefix","sections","PostDataSourceDocumentRequestSchema","parent_id","parents","source_url","upsert_context","sync_type","section","light_document_output","async","mime_type","UpsertTableRowsRequestSchema","rows","row_id","epoch","truncate","PostTableParentsRequestSchema","UpsertTableFromCsvRequestSchema","parentId","mimeType","tableId","UpsertDatabaseTableRequestSchema","table_id","remote_database_table_id","remote_database_secret_id","SupportedUsageTablesSchema","CoreAPIFolderSchema","data_source_id","folder_id","GetFoldersResponseSchema","folders","total","GetFolderResponseSchema","folder","DeleteFolderResponseSchema","UpsertFolderResponseSchema","data_source","ProviderVisibilitySchema","UpsertDataSourceFolderRequestSchema","provider_visibility","DateSchema","test","GetWorkspaceUsageRequestSchema","start","end","mode","table","format","FileUploadUrlRequestSchema","fileName","max","fileSize","useCase","useCaseMetadata","conversationId","FileTypeStatusSchema","FileTypeUseCaseSchema","FileTypeSchema","downloadUrl","uploadUrl","publicUrl","FileTypeWithUploadUrlSchema","FileUploadRequestResponseSchema","file","FileUploadedRequestResponseSchema","MeResponseSchema","and","workspaces","CancelMessageGenerationResponseSchema","CancelMessageGenerationRequestSchema","messageIds","getProviderFromRetrievedDocument","document","AppsCheckRequestSchema","AppsCheckResponseSchema","deployed","GetSpacesResponseSchema","spaces","BaseSearchBodySchema","viewType","spaceIds","includeDataSources","limit","SearchRequestBodySchema","nodeIds","ContentNodeSchema","expandable","internalId","lastUpdatedAt","parentInternalId","preventSelection","providerVisibility","ContentNodeWithParentSchema","parentsInternalIds","parentTitle","DataSourceContentNodeSchema","dataSourceViews","DataSourceViewContentNodeSchema","SearchWarningCodeSchema","PostWorkspaceSearchResponseBodySchema","nodes","warningCode","ValidateActionResponseSchema","ValidateActionRequestBodySchema","actionId","approved","RegisterMCPResponseSchema","expiresAt","HeartbeatMCPResponseSchema","PublicPostMCPResultsRequestBodySchema","requestId","result","PostMCPResultsResponseSchema","generateConnectorRelativeMimeTypes","_ref","resourceTypes","reduce","acc","_extends2","replace","toLowerCase","DATA_SOURCE_MIME_TYPE","CONTENT_NODE_MIME_TYPES","GENERIC","DATA_SOURCE","CONFLUENCE","GITHUB","GOOGLE_DRIVE","INTERCOM","MICROSOFT","NOTION","SLACK","SNOWFLAKE","WEBCRAWLER","ZENDESK","BIGQUERY","SALESFORCE","GONG","INCLUDABLE_INTERNAL_CONTENT_NODE_MIME_TYPES","PAGE","ISSUE","DISCUSSION","CONVERSATION","ARTICLE","THREAD","MESSAGES","TICKET","generateToolMimeTypes","_ref2","_extends3","INTERNAL_MIME_TYPES","TOOL_INPUT","TOOL_OUTPUT","INTERNAL_MIME_TYPES_VALUES","values","flatMap","v","INCLUDABLE_INTERNAL_MIME_TYPES_VALUES","textFromResponse","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","stream","wrap","_context","prev","next","body","abrupt","Promise","resolve","reject","on","chunk","push","Buffer","from","toString","stop","_x","apply","arguments","axiosNoKeepAlive","axios","create","httpAgent","http","Agent","keepAlive","httpsAgent","https","DustAPI","credentials","logger","urlOverride","_url","_credentials","_logger","_urlOverride","setWorkspaceId","apiUrl","getApiKey","_getApiKey","_callee2","_context2","apiKey","baseHeaders","_baseHeaders","_callee3","headers","_context3","t0","sent","t1","Authorization","extraHeaders","assign","me","_me","_callee4","res","r","_context4","_fetchWithError","method","_resultFromResponse","request","_request","_callee5","args","_args$overrideWorkspa","_context5","path","overrideWorkspaceId","JSON","stringify","signal","_x2","runApp","_runApp","_callee6","_ref4","inputs","_temp","appSpaceId","useWorkspaceCredentials","_context6","URLSearchParams","use_workspace_credentials","_x3","_x4","_x5","_x6","runAppStreamed","_runAppStreamed","_callee9","_ref6","_temp2","processStreamedRunResponse","_processStreamedRunResponse","_context9","_callee8","hasRunId","rejectDustRunIdPromise","resolveDustRunIdPromise","dustRunIdPromise","pendingEvents","parser","reader","streamEvents","_context8","ok","createParser","event","_data$content","parse","err","_wrapAsyncGenerator","_callee7","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_i","_pendingEvents","_context7","_asyncIterator","_awaitAsyncGenerator","done","feed","TextDecoder","decode","length","finish","setImmediate","Error","errorStr","errorSource","eventStream","dustRunId","_processStreamedRunRe","_x11","_x12","_x7","_x8","_x9","_x10","getDataSources","_getDataSources","_callee10","_context10","getAgentConfigurations","_getAgentConfigurations","_callee11","_ref8","view","_ref8$includes","getQueryString","queryString","_context11","append","_x13","postContentFragment","_postContentFragment","_callee12","_ref9","_context12","_x14","createConversation","_createConversation","_callee13","_ref10","_ref10$blocking","_context13","_x15","postUserMessage","_postUserMessage","_callee14","_ref11","_context14","_x16","streamAgentAnswerEvents","_streamAgentAnswerEvents","_callee15","_ref12","userMessageId","agentMessages","_context15","versions","filter","m","streamAgentMessageEvents","agentMessage","_x17","_streamAgentMessageEvents","_callee17","_ref13","_this","_context17","t2","t3","t4","_callee16","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_i2","_pendingEvents2","_context16","_x18","cancelMessageGeneration","_cancelMessageGeneration","_callee18","_ref14","_context18","_x19","getConversations","_getConversations","_callee19","_context19","getConversation","_getConversation","_callee20","_ref15","_context20","_x20","getConversationFeedback","_getConversationFeedback","_callee21","_ref16","_context21","_x21","postFeedback","_postFeedback","_callee22","feedback","_context22","_x22","_x23","_x24","deleteFeedback","_deleteFeedback","_callee23","_context23","_x25","_x26","tokenize","_tokenize","_callee24","_context24","_x27","_x28","upsertFolder","_upsertFolder","_callee25","_ref17","folderId","_context25","encodeURIComponent","Math","floor","_x29","deleteFolder","_deleteFolder","_callee26","_ref18","_context26","_x30","uploadFile","_uploadFile","_callee27","_ref19","fileObject","fileRes","formData","_err$response","_context27","FormData","post","call","t5","isAxiosError","_x31","deleteFile","_deleteFile","_callee28","_ref20","fileID","_context28","_x32","getActiveMemberEmailsInWorkspace","_getActiveMemberEmailsInWorkspace","_callee29","_context29","activeOnly","getWorkspaceVerifiedDomains","_getWorkspaceVerifiedDomains","_callee30","_context30","getWorkspaceFeatureFlags","_getWorkspaceFeatureFlags","_callee31","_context31","searchDataSourceViews","_searchDataSourceViews","_callee32","searchParams","_context32","_x33","patchDataSourceView","_patchDataSourceView","_callee33","patch","_context33","_x34","_x35","exportApps","_exportApps","_callee34","_ref21","_context34","_x36","checkApps","_checkApps","_callee35","_context35","_x37","_x38","getSpaces","_getSpaces","_callee36","_context36","searchNodes","_searchNodes","_callee37","_context37","_x39","_fetchWithError2","_callee38","now","_context38","Date","validateStatus","responseType","dustError","connectorsError","e","_x40","_x41","validateAction","_validateAction","_callee39","_ref22","_context39","_x42","registerMCPServer","_registerMCPServer","_callee40","_ref23","serverId","_context40","_x43","heartbeatMCPServer","_heartbeatMCPServer","_callee41","_ref24","_context41","_x44","postMCPResults","_postMCPResults","_callee42","_ref25","_context42","set","_x45","getMCPRequestsConnectionDetails","_getMCPRequestsConnectionDetails","_callee43","_ref26","lastEventId","_context43","_x46","_resultFromResponse2","_callee44","rErr","_err","_err2","_context44","safeParse","parseError","rawText","_x47","_x48","browse_action","conversation_include_file_action","conversation_list_files_action","dust_app_run_action","process_action","reasoning_action","retrieval_action","search_labels_action","tables_query_action","websearch_action","tool_action","action","x","_createForOfIteratorHelperLoose","t","startsWith","substring","arg","obj","ds","arr"],"mappings":"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"}