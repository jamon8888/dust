# core

- [x] abstract all storage behind a Trait with sqlite in mind
- [x] move storage to sqlite for cli
- [x] ensure there is no (type, name) duplicate
- [x] extend sqlite functional tests
- [ ] options block
- [ ] if/end block
- [ ] while block
- [ ] eval block
- [ ] interrupt only affected inputs on error

## api

- [x] sqlite locally behind Trait
- [x] API implementation
  - [x] run create (run object is written to DB at creation)
  - [x] run status (updated in DB as we make progress)
  - [x] incremental run ceation in DB
  - [x] APIState pointers to runs in progress
- [ ] Postgres Store

## cli

- [x] split off cli code from core
      not fully splitted but well abstacted now (no filesystem in core code)
- [x] take type on top of name for inspect
- [ ] dust deploy (serve as an endpoint and log)
    - what is the underlying data store? run-like?
    - dust deploys list

# front

- [~] Landing
- [x] Github Login
- [~] Design + Run
- [ ] Deploy

# Go LIvE

## P0 (must-have)

- [x] block output display
- [ ] integrate cohere in dust/core
- [ ] allow read-only/unsigned access of public apps
- [ ] sign-in in App top-bar when unsigned
- [ ] support menu:
  - [ ] minimal documentation
  - [ ] discord invite
- [ ] move to postgres
- [ ] minimal deployment on gcp
- [ ] prod Github app with icon
- [ ] initial demo (math to code)
- [ ] a bit of work on the landing

## P1 (rapid follow-up)

- [ ] twitter card
- [ ] edit/Delete app
- [ ] clone app
- [ ] google block
- [ ] while block
- [ ] if/then block
- [ ] demo 2: self-ask / react

## P2

- [ ] Deploy as an endpoint + capture traffic
